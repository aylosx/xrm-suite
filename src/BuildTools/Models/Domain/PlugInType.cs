//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aylos.Xrm.Sdk.BuildTools.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Type that inherits from the IPlugin interface and is contained within a plug-in assembly.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("plugintype")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9479")]
	public partial class PlugInType : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public PlugInType() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "plugintype";
		
		public const int EntityTypeCode = 4602;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Full path name of the plug-in assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("assemblyname")]
		public string AssemblyName
		{
			get
			{
				return this.GetAttributeValue<string>("assemblyname");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("componentstate")]
		public Nullable<GlobalComponentState> ComponentState
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("componentstate");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalComponentState)(Enum.ToObject(typeof(GlobalComponentState), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the plug-in type.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the plug-in type was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Culture code for the plug-in assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("culture")]
		public string Culture
		{
			get
			{
				return this.GetAttributeValue<string>("culture");
			}
		}
		
		/// <summary>
		/// Customization level of the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("customizationlevel")]
		public Nullable<int> CustomizationLevel
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("customizationlevel");
			}
		}
		
		/// <summary>
		/// Serialized Custom Activity Type information, including required arguments. For more information, see SandboxCustomActivityInfo.
		/// </summary>
		[AttributeLogicalNameAttribute("customworkflowactivityinfo")]
		public string CustomWorkflowActivityInfo
		{
			get
			{
				return this.GetAttributeValue<string>("customworkflowactivityinfo");
			}
		}
		
		/// <summary>
		/// Description of the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// User friendly name for the plug-in.
		/// </summary>
		[AttributeLogicalNameAttribute("friendlyname")]
		public string DisplayName
		{
			get
			{
				return this.GetAttributeValue<string>("friendlyname");
			}
			set
			{
				this.OnPropertyChanging("DisplayName");
				this.SetAttributeValue("friendlyname", value);
				this.OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("ismanaged")]
		public Nullable<bool> IsManaged
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// Indicates if the plug-in is a custom activity for workflows.
		/// </summary>
		[AttributeLogicalNameAttribute("isworkflowactivity")]
		public Nullable<bool> IsWorkflowActivity
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isworkflowactivity");
			}
		}
		
		/// <summary>
		/// Major of the version number of the assembly for the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("major")]
		public Nullable<int> VersionMajor
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("major");
			}
		}
		
		/// <summary>
		/// Minor of the version number of the assembly for the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("minor")]
		public Nullable<int> VersionMinor
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("minor");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the plug-in type.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the plug-in type was last modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Name of the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization with which the plug-in type is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("organizationid")]
		public EntityReference OrganizationId
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("overwritetime")]
		public Nullable<DateTime> RecordOverwriteTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// Unique identifier of the plug-in assembly that contains this plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("pluginassemblyid")]
		public EntityReference PluginAssembly
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("pluginassemblyid");
			}
			set
			{
				this.OnPropertyChanging("PluginAssembly");
				this.SetAttributeValue("pluginassemblyid", value);
				this.OnPropertyChanged("PluginAssembly");
			}
		}
		
		/// <summary>
		/// Unique identifier of the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("plugintypeid")]
		public Nullable<Guid> PluginTypeId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("plugintypeid");
			}
			set
			{
				this.OnPropertyChanging("PluginTypeId");
				this.SetAttributeValue("plugintypeid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("PluginTypeId");
			}
		}
		
		[AttributeLogicalNameAttribute("plugintypeid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.PluginTypeId = value;
			}
		}
		
		/// <summary>
		/// Unique identifier of the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("plugintypeidunique")]
		public Nullable<Guid> PluginTypeIdUnique
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("plugintypeidunique");
			}
		}
		
		/// <summary>
		/// Public key token of the assembly for the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("publickeytoken")]
		public string PublicKeyToken
		{
			get
			{
				return this.GetAttributeValue<string>("publickeytoken");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[AttributeLogicalNameAttribute("solutionid")]
		public Nullable<Guid> Solution
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// Fully qualified type name of the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("typename")]
		public string TypeName
		{
			get
			{
				return this.GetAttributeValue<string>("typename");
			}
			set
			{
				this.OnPropertyChanging("TypeName");
				this.SetAttributeValue("typename", value);
				this.OnPropertyChanged("TypeName");
			}
		}
		
		/// <summary>
		/// Version number of the assembly for the plug-in type.
		/// </summary>
		[AttributeLogicalNameAttribute("version")]
		public string Version
		{
			get
			{
				return this.GetAttributeValue<string>("version");
			}
		}
		
		/// <summary>
		/// Group name of workflow custom activity.
		/// </summary>
		[AttributeLogicalNameAttribute("workflowactivitygroupname")]
		public string WorkflowActivityGroupName
		{
			get
			{
				return this.GetAttributeValue<string>("workflowactivitygroupname");
			}
			set
			{
				this.OnPropertyChanging("WorkflowActivityGroupName");
				this.SetAttributeValue("workflowactivitygroupname", value);
				this.OnPropertyChanged("WorkflowActivityGroupName");
			}
		}
		
		public struct Fields
		{
			
			public static string AssemblyName = "assemblyname";
			
			public static string ComponentState = "componentstate";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string Culture = "culture";
			
			public static string CustomizationLevel = "customizationlevel";
			
			public static string CustomWorkflowActivityInfo = "customworkflowactivityinfo";
			
			public static string Description = "description";
			
			public static string DisplayName = "friendlyname";
			
			public static string IsManaged = "ismanaged";
			
			public static string IsWorkflowActivity = "isworkflowactivity";
			
			public static string VersionMajor = "major";
			
			public static string VersionMinor = "minor";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string Name = "name";
			
			public static string OrganizationId = "organizationid";
			
			public static string RecordOverwriteTime = "overwritetime";
			
			public static string PluginAssembly = "pluginassemblyid";
			
			public static string PluginTypeId = "plugintypeid";
			
			public static string Id = "plugintypeid";
			
			public static string PluginTypeIdUnique = "plugintypeidunique";
			
			public static string PublicKeyToken = "publickeytoken";
			
			public static string Solution = "solutionid";
			
			public static string TypeName = "typename";
			
			public static string Version = "version";
			
			public static string WorkflowActivityGroupName = "workflowactivitygroupname";
		}
	}
}
