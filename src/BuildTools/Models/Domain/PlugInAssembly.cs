//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aylos.Xrm.Sdk.BuildTools.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Assembly that contains one or more plug-in types.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("pluginassembly")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9479")]
	public partial class PlugInAssembly : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public PlugInAssembly() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "pluginassembly";
		
		public const int EntityTypeCode = 4605;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Specifies mode of authentication with web sources like WebApp
		/// </summary>
		[AttributeLogicalNameAttribute("authtype")]
		public Nullable<PlugInAssemblyAuthType> SpecifiesModeOfAuthenticationWithWebSources
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("authtype");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (PlugInAssemblyAuthType)(Enum.ToObject(typeof(PlugInAssemblyAuthType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("SpecifiesModeOfAuthenticationWithWebSources");
				if (value == null)
				{
					this.SetAttributeValue("authtype", null);
				}
				else
				{
					this.SetAttributeValue("authtype", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("SpecifiesModeOfAuthenticationWithWebSources");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("componentstate")]
		public Nullable<GlobalComponentState> ComponentState
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("componentstate");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalComponentState)(Enum.ToObject(typeof(GlobalComponentState), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// Bytes of the assembly, in Base64 format.
		/// </summary>
		[AttributeLogicalNameAttribute("content")]
		public string Content
		{
			get
			{
				return this.GetAttributeValue<string>("content");
			}
			set
			{
				this.OnPropertyChanging("Content");
				this.SetAttributeValue("content", value);
				this.OnPropertyChanged("Content");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the plug-in assembly.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the plug-in assembly was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Culture code for the plug-in assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("culture")]
		public string Culture
		{
			get
			{
				return this.GetAttributeValue<string>("culture");
			}
			set
			{
				this.OnPropertyChanging("Culture");
				this.SetAttributeValue("culture", value);
				this.OnPropertyChanged("Culture");
			}
		}
		
		/// <summary>
		/// Customization Level.
		/// </summary>
		[AttributeLogicalNameAttribute("customizationlevel")]
		public Nullable<int> CustomizationLevel
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("customizationlevel");
			}
		}
		
		/// <summary>
		/// Description of the plug-in assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Version in which the form is introduced.
		/// </summary>
		[AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				return this.GetAttributeValue<string>("introducedversion");
			}
			set
			{
				this.OnPropertyChanging("IntroducedVersion");
				this.SetAttributeValue("introducedversion", value);
				this.OnPropertyChanged("IntroducedVersion");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component can be customized.
		/// </summary>
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return this.GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				this.OnPropertyChanging("Customizable");
				this.SetAttributeValue("iscustomizable", value);
				this.OnPropertyChanged("Customizable");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component should be hidden.
		/// </summary>
		[AttributeLogicalNameAttribute("ishidden")]
		public BooleanManagedProperty Hidden
		{
			get
			{
				return this.GetAttributeValue<BooleanManagedProperty>("ishidden");
			}
			set
			{
				this.OnPropertyChanging("Hidden");
				this.SetAttributeValue("ishidden", value);
				this.OnPropertyChanged("Hidden");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component is managed.
		/// </summary>
		[AttributeLogicalNameAttribute("ismanaged")]
		public Nullable<bool> State
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// Information about how the plugin assembly is to be isolated at execution time; None / Sandboxed.
		/// </summary>
		[AttributeLogicalNameAttribute("isolationmode")]
		public Nullable<PlugInAssemblyIsolationMode> IsolationMode
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("isolationmode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (PlugInAssemblyIsolationMode)(Enum.ToObject(typeof(PlugInAssemblyIsolationMode), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("IsolationMode");
				if (value == null)
				{
					this.SetAttributeValue("isolationmode", null);
				}
				else
				{
					this.SetAttributeValue("isolationmode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("IsolationMode");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("ispasswordset")]
		public Nullable<bool> IsPasswordSet
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ispasswordset");
			}
		}
		
		/// <summary>
		/// Major of the assembly version.
		/// </summary>
		[AttributeLogicalNameAttribute("major")]
		public Nullable<int> Major
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("major");
			}
		}
		
		/// <summary>
		/// Minor of the assembly version.
		/// </summary>
		[AttributeLogicalNameAttribute("minor")]
		public Nullable<int> Minor
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("minor");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the plug-in assembly.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the plug-in assembly was last modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Name of the plug-in assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization with which the plug-in assembly is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("organizationid")]
		public EntityReference OrganizationId
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("overwritetime")]
		public Nullable<DateTime> RecordOverwriteTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// File name of the plug-in assembly. Used when the source type is set to 1.
		/// </summary>
		[AttributeLogicalNameAttribute("path")]
		public string Path
		{
			get
			{
				return this.GetAttributeValue<string>("path");
			}
			set
			{
				this.OnPropertyChanging("Path");
				this.SetAttributeValue("path", value);
				this.OnPropertyChanged("Path");
			}
		}
		
		/// <summary>
		/// Unique identifier of the plug-in assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("pluginassemblyid")]
		public Nullable<Guid> PluginAssemblyId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("pluginassemblyid");
			}
			set
			{
				this.OnPropertyChanging("PluginAssemblyId");
				this.SetAttributeValue("pluginassemblyid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("PluginAssemblyId");
			}
		}
		
		[AttributeLogicalNameAttribute("pluginassemblyid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.PluginAssemblyId = value;
			}
		}
		
		/// <summary>
		/// Unique identifier of the plug-in assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("pluginassemblyidunique")]
		public Nullable<Guid> PluginAssemblyIdUnique
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("pluginassemblyidunique");
			}
		}
		
		/// <summary>
		/// Public key token of the assembly. This value can be obtained from the assembly by using reflection.
		/// </summary>
		[AttributeLogicalNameAttribute("publickeytoken")]
		public string PublicKeyToken
		{
			get
			{
				return this.GetAttributeValue<string>("publickeytoken");
			}
			set
			{
				this.OnPropertyChanging("PublicKeyToken");
				this.SetAttributeValue("publickeytoken", value);
				this.OnPropertyChanged("PublicKeyToken");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[AttributeLogicalNameAttribute("solutionid")]
		public Nullable<Guid> Solution
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// Hash of the source of the assembly.
		/// </summary>
		[AttributeLogicalNameAttribute("sourcehash")]
		public string SourceHash
		{
			get
			{
				return this.GetAttributeValue<string>("sourcehash");
			}
			set
			{
				this.OnPropertyChanging("SourceHash");
				this.SetAttributeValue("sourcehash", value);
				this.OnPropertyChanged("SourceHash");
			}
		}
		
		/// <summary>
		/// Location of the assembly, for example 0=database, 1=on-disk.
		/// </summary>
		[AttributeLogicalNameAttribute("sourcetype")]
		public Nullable<PlugInAssemblySourceType> SourceType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("sourcetype");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (PlugInAssemblySourceType)(Enum.ToObject(typeof(PlugInAssemblySourceType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("SourceType");
				if (value == null)
				{
					this.SetAttributeValue("sourcetype", null);
				}
				else
				{
					this.SetAttributeValue("sourcetype", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("SourceType");
			}
		}
		
		/// <summary>
		/// Web Url
		/// </summary>
		[AttributeLogicalNameAttribute("url")]
		public string WebUrl
		{
			get
			{
				return this.GetAttributeValue<string>("url");
			}
			set
			{
				this.OnPropertyChanging("WebUrl");
				this.SetAttributeValue("url", value);
				this.OnPropertyChanged("WebUrl");
			}
		}
		
		/// <summary>
		/// User Name
		/// </summary>
		[AttributeLogicalNameAttribute("username")]
		public string UserName
		{
			get
			{
				return this.GetAttributeValue<string>("username");
			}
			set
			{
				this.OnPropertyChanging("UserName");
				this.SetAttributeValue("username", value);
				this.OnPropertyChanged("UserName");
			}
		}
		
		/// <summary>
		/// Version number of the assembly. The value can be obtained from the assembly through reflection.
		/// </summary>
		[AttributeLogicalNameAttribute("version")]
		public string Version
		{
			get
			{
				return this.GetAttributeValue<string>("version");
			}
			set
			{
				this.OnPropertyChanging("Version");
				this.SetAttributeValue("version", value);
				this.OnPropertyChanged("Version");
			}
		}
		
		public struct Fields
		{
			
			public static string SpecifiesModeOfAuthenticationWithWebSources = "authtype";
			
			public static string ComponentState = "componentstate";
			
			public static string Content = "content";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string Culture = "culture";
			
			public static string CustomizationLevel = "customizationlevel";
			
			public static string Description = "description";
			
			public static string IntroducedVersion = "introducedversion";
			
			public static string Customizable = "iscustomizable";
			
			public static string Hidden = "ishidden";
			
			public static string State = "ismanaged";
			
			public static string IsolationMode = "isolationmode";
			
			public static string IsPasswordSet = "ispasswordset";
			
			public static string Major = "major";
			
			public static string Minor = "minor";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string Name = "name";
			
			public static string OrganizationId = "organizationid";
			
			public static string RecordOverwriteTime = "overwritetime";
			
			public static string Path = "path";
			
			public static string PluginAssemblyId = "pluginassemblyid";
			
			public static string Id = "pluginassemblyid";
			
			public static string PluginAssemblyIdUnique = "pluginassemblyidunique";
			
			public static string PublicKeyToken = "publickeytoken";
			
			public static string Solution = "solutionid";
			
			public static string SourceHash = "sourcehash";
			
			public static string SourceType = "sourcetype";
			
			public static string WebUrl = "url";
			
			public static string UserName = "username";
			
			public static string Version = "version";
		}
	}
}
