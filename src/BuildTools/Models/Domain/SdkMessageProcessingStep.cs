//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aylos.Xrm.Sdk.BuildTools.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Stage in the execution pipeline that a plug-in is to execute.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("sdkmessageprocessingstep")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9479")]
	public partial class SdkMessageProcessingStep : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public SdkMessageProcessingStep() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "sdkmessageprocessingstep";
		
		public const int EntityTypeCode = 4608;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Indicates whether the asynchronous system job is automatically deleted on completion.
		/// </summary>
		[AttributeLogicalNameAttribute("asyncautodelete")]
		public Nullable<bool> AsynchronousAutomaticDelete
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("asyncautodelete");
			}
			set
			{
				this.OnPropertyChanging("AsynchronousAutomaticDelete");
				this.SetAttributeValue("asyncautodelete", value);
				this.OnPropertyChanged("AsynchronousAutomaticDelete");
			}
		}
		
		/// <summary>
		/// Identifies whether a SDK Message Processing Step type will be ReadOnly or Read Write. false - ReadWrite, true - ReadOnly 
		/// </summary>
		[AttributeLogicalNameAttribute("canusereadonlyconnection")]
		public Nullable<bool> Intent
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("canusereadonlyconnection");
			}
			set
			{
				this.OnPropertyChanging("Intent");
				this.SetAttributeValue("canusereadonlyconnection", value);
				this.OnPropertyChanged("Intent");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("componentstate")]
		public Nullable<GlobalComponentState> ComponentState
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("componentstate");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalComponentState)(Enum.ToObject(typeof(GlobalComponentState), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// Step-specific configuration for the plug-in type. Passed to the plug-in constructor at run time.
		/// </summary>
		[AttributeLogicalNameAttribute("configuration")]
		public string Configuration
		{
			get
			{
				return this.GetAttributeValue<string>("configuration");
			}
			set
			{
				this.OnPropertyChanging("Configuration");
				this.SetAttributeValue("configuration", value);
				this.OnPropertyChanged("Configuration");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the SDK message processing step.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the SDK message processing step was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Customization level of the SDK message processing step.
		/// </summary>
		[AttributeLogicalNameAttribute("customizationlevel")]
		public Nullable<int> CustomizationLevel
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("customizationlevel");
			}
		}
		
		/// <summary>
		/// Description of the SDK message processing step.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Configuration for sending pipeline events to the Event Expander service.
		/// </summary>
		[AttributeLogicalNameAttribute("eventexpander")]
		public string EventExpander
		{
			get
			{
				return this.GetAttributeValue<string>("eventexpander");
			}
			set
			{
				this.OnPropertyChanging("EventExpander");
				this.SetAttributeValue("eventexpander", value);
				this.OnPropertyChanged("EventExpander");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated event handler.
		/// </summary>
		[AttributeLogicalNameAttribute("eventhandler")]
		public EntityReference EventHandler
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("eventhandler");
			}
			set
			{
				this.OnPropertyChanging("EventHandler");
				this.SetAttributeValue("eventhandler", value);
				this.OnPropertyChanged("EventHandler");
			}
		}
		
		/// <summary>
		/// Comma-separated list of attributes. If at least one of these attributes is modified, the plug-in should execute.
		/// </summary>
		[AttributeLogicalNameAttribute("filteringattributes")]
		public string FilteringAttributes
		{
			get
			{
				return this.GetAttributeValue<string>("filteringattributes");
			}
			set
			{
				this.OnPropertyChanging("FilteringAttributes");
				this.SetAttributeValue("filteringattributes", value);
				this.OnPropertyChanged("FilteringAttributes");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user to impersonate context when step is executed.
		/// </summary>
		[AttributeLogicalNameAttribute("impersonatinguserid")]
		public EntityReference ImpersonatingUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("impersonatinguserid");
			}
			set
			{
				this.OnPropertyChanging("ImpersonatingUser");
				this.SetAttributeValue("impersonatinguserid", value);
				this.OnPropertyChanged("ImpersonatingUser");
			}
		}
		
		/// <summary>
		/// Version in which the form is introduced.
		/// </summary>
		[AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				return this.GetAttributeValue<string>("introducedversion");
			}
			set
			{
				this.OnPropertyChanging("IntroducedVersion");
				this.SetAttributeValue("introducedversion", value);
				this.OnPropertyChanged("IntroducedVersion");
			}
		}
		
		/// <summary>
		/// Identifies if a plug-in should be executed from a parent pipeline, a child pipeline, or both.
		/// </summary>
		[AttributeLogicalNameAttribute("invocationsource")]
		[System.ObsoleteAttribute()]
		public Nullable<SdkMessageProcessingStepInvocationSource> InvocationSource
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("invocationsource");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (SdkMessageProcessingStepInvocationSource)(Enum.ToObject(typeof(SdkMessageProcessingStepInvocationSource), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("InvocationSource");
				if (value == null)
				{
					this.SetAttributeValue("invocationsource", null);
				}
				else
				{
					this.SetAttributeValue("invocationsource", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("InvocationSource");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component can be customized.
		/// </summary>
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return this.GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				this.OnPropertyChanging("Customizable");
				this.SetAttributeValue("iscustomizable", value);
				this.OnPropertyChanged("Customizable");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component should be hidden.
		/// </summary>
		[AttributeLogicalNameAttribute("ishidden")]
		public BooleanManagedProperty Hidden
		{
			get
			{
				return this.GetAttributeValue<BooleanManagedProperty>("ishidden");
			}
			set
			{
				this.OnPropertyChanging("Hidden");
				this.SetAttributeValue("ishidden", value);
				this.OnPropertyChanged("Hidden");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component is managed.
		/// </summary>
		[AttributeLogicalNameAttribute("ismanaged")]
		public Nullable<bool> State
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// Run-time mode of execution, for example, synchronous or asynchronous.
		/// </summary>
		[AttributeLogicalNameAttribute("mode")]
		public Nullable<SdkMessageProcessingStepMode> ExecutionMode
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("mode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (SdkMessageProcessingStepMode)(Enum.ToObject(typeof(SdkMessageProcessingStepMode), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ExecutionMode");
				if (value == null)
				{
					this.SetAttributeValue("mode", null);
				}
				else
				{
					this.SetAttributeValue("mode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ExecutionMode");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the SDK message processing step.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the SDK message processing step was last modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Name of SdkMessage processing step.
		/// </summary>
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization with which the SDK message processing step is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("organizationid")]
		public EntityReference OrganizationId
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("overwritetime")]
		public Nullable<DateTime> RecordOverwriteTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// Unique identifier of the plug-in type associated with the step.
		/// </summary>
		[AttributeLogicalNameAttribute("plugintypeid")]
		[System.ObsoleteAttribute()]
		public EntityReference PlugInType
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("plugintypeid");
			}
			set
			{
				this.OnPropertyChanging("PlugInType");
				this.SetAttributeValue("plugintypeid", value);
				this.OnPropertyChanged("PlugInType");
			}
		}
		
		/// <summary>
		/// Processing order within the stage.
		/// </summary>
		[AttributeLogicalNameAttribute("rank")]
		public Nullable<int> ExecutionOrder
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("rank");
			}
			set
			{
				this.OnPropertyChanging("ExecutionOrder");
				this.SetAttributeValue("rank", value);
				this.OnPropertyChanged("ExecutionOrder");
			}
		}
		
		/// <summary>
		/// Unique identifier of the SDK message filter.
		/// </summary>
		[AttributeLogicalNameAttribute("sdkmessagefilterid")]
		public EntityReference SdkMessageFilter
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("sdkmessagefilterid");
			}
			set
			{
				this.OnPropertyChanging("SdkMessageFilter");
				this.SetAttributeValue("sdkmessagefilterid", value);
				this.OnPropertyChanged("SdkMessageFilter");
			}
		}
		
		/// <summary>
		/// Unique identifier of the SDK message.
		/// </summary>
		[AttributeLogicalNameAttribute("sdkmessageid")]
		public EntityReference SDKMessage
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("sdkmessageid");
			}
			set
			{
				this.OnPropertyChanging("SDKMessage");
				this.SetAttributeValue("sdkmessageid", value);
				this.OnPropertyChanged("SDKMessage");
			}
		}
		
		/// <summary>
		/// Unique identifier of the SDK message processing step entity.
		/// </summary>
		[AttributeLogicalNameAttribute("sdkmessageprocessingstepid")]
		public Nullable<Guid> SdkMessageProcessingStepId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("sdkmessageprocessingstepid");
			}
			set
			{
				this.OnPropertyChanging("SdkMessageProcessingStepId");
				this.SetAttributeValue("sdkmessageprocessingstepid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("SdkMessageProcessingStepId");
			}
		}
		
		[AttributeLogicalNameAttribute("sdkmessageprocessingstepid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.SdkMessageProcessingStepId = value;
			}
		}
		
		/// <summary>
		/// Unique identifier of the SDK message processing step.
		/// </summary>
		[AttributeLogicalNameAttribute("sdkmessageprocessingstepidunique")]
		public Nullable<Guid> SdkMessageProcessingStepIdUnique
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("sdkmessageprocessingstepidunique");
			}
		}
		
		/// <summary>
		/// Unique identifier of the Sdk message processing step secure configuration.
		/// </summary>
		[AttributeLogicalNameAttribute("sdkmessageprocessingstepsecureconfigid")]
		public EntityReference SDKMessageProcessingStepSecureConfiguration
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("sdkmessageprocessingstepsecureconfigid");
			}
			set
			{
				this.OnPropertyChanging("SDKMessageProcessingStepSecureConfiguration");
				this.SetAttributeValue("sdkmessageprocessingstepsecureconfigid", value);
				this.OnPropertyChanged("SDKMessageProcessingStepSecureConfiguration");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[AttributeLogicalNameAttribute("solutionid")]
		public Nullable<Guid> Solution
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// Stage in the execution pipeline that the SDK message processing step is in.
		/// </summary>
		[AttributeLogicalNameAttribute("stage")]
		public Nullable<SdkMessageProcessingStepStage> ExecutionStage
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("stage");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (SdkMessageProcessingStepStage)(Enum.ToObject(typeof(SdkMessageProcessingStepStage), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ExecutionStage");
				if (value == null)
				{
					this.SetAttributeValue("stage", null);
				}
				else
				{
					this.SetAttributeValue("stage", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ExecutionStage");
			}
		}
		
		/// <summary>
		/// Status of the SDK message processing step.
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<SdkMessageProcessingStepState> StateCode
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((SdkMessageProcessingStepState)(Enum.ToObject(typeof(SdkMessageProcessingStepState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StateCode");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StateCode");
			}
		}
		
		/// <summary>
		/// Reason for the status of the SDK message processing step.
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<SdkMessageProcessingStepStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((SdkMessageProcessingStepStatusReason)(Enum.ToObject(typeof(SdkMessageProcessingStepStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		/// <summary>
		/// Deployment that the SDK message processing step should be executed on; server, client, or both.
		/// </summary>
		[AttributeLogicalNameAttribute("supporteddeployment")]
		public Nullable<SdkMessageProcessingStepSupportedDeployment> Deployment
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("supporteddeployment");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (SdkMessageProcessingStepSupportedDeployment)(Enum.ToObject(typeof(SdkMessageProcessingStepSupportedDeployment), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Deployment");
				if (value == null)
				{
					this.SetAttributeValue("supporteddeployment", null);
				}
				else
				{
					this.SetAttributeValue("supporteddeployment", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Deployment");
			}
		}
		
		public struct Fields
		{
			
			public static string AsynchronousAutomaticDelete = "asyncautodelete";
			
			public static string Intent = "canusereadonlyconnection";
			
			public static string ComponentState = "componentstate";
			
			public static string Configuration = "configuration";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string CustomizationLevel = "customizationlevel";
			
			public static string Description = "description";
			
			public static string EventExpander = "eventexpander";
			
			public static string EventHandler = "eventhandler";
			
			public static string FilteringAttributes = "filteringattributes";
			
			public static string ImpersonatingUser = "impersonatinguserid";
			
			public static string IntroducedVersion = "introducedversion";
			
			public static string InvocationSource = "invocationsource";
			
			public static string Customizable = "iscustomizable";
			
			public static string Hidden = "ishidden";
			
			public static string State = "ismanaged";
			
			public static string ExecutionMode = "mode";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string Name = "name";
			
			public static string OrganizationId = "organizationid";
			
			public static string RecordOverwriteTime = "overwritetime";
			
			public static string PlugInType = "plugintypeid";
			
			public static string ExecutionOrder = "rank";
			
			public static string SdkMessageFilter = "sdkmessagefilterid";
			
			public static string SDKMessage = "sdkmessageid";
			
			public static string SdkMessageProcessingStepId = "sdkmessageprocessingstepid";
			
			public static string Id = "sdkmessageprocessingstepid";
			
			public static string SdkMessageProcessingStepIdUnique = "sdkmessageprocessingstepidunique";
			
			public static string SDKMessageProcessingStepSecureConfiguration = "sdkmessageprocessingstepsecureconfigid";
			
			public static string Solution = "solutionid";
			
			public static string ExecutionStage = "stage";
			
			public static string StateCode = "statecode";
			
			public static string StatusReason = "statuscode";
			
			public static string Deployment = "supporteddeployment";
		}
	}
}
