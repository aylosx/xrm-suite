//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aylos.Xrm.Sdk.BuildTools.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// A component of a CRM solution.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("solutioncomponent")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9479")]
	public partial class SolutionComponent : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public SolutionComponent() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "solutioncomponent";
		
		public const int EntityTypeCode = 7103;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// The object type code of the component.
		/// </summary>
		[AttributeLogicalNameAttribute("componenttype")]
		public Nullable<GlobalComponentType> ObjectTypeCode
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("componenttype");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalComponentType)(Enum.ToObject(typeof(GlobalComponentType), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the solution
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the solution was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Indicates whether this component is metadata or data.
		/// </summary>
		[AttributeLogicalNameAttribute("ismetadata")]
		public Nullable<bool> IsThisComponentMetadata
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismetadata");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the solution.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the solution was last modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Unique identifier of the object with which the component is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("objectid")]
		public Nullable<Guid> Regarding
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("objectid");
			}
		}
		
		/// <summary>
		/// Indicates the include behavior of the root component.
		/// </summary>
		[AttributeLogicalNameAttribute("rootcomponentbehavior")]
		public Nullable<SolutionComponentIncludeBehavior> RootComponentBehavior
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("rootcomponentbehavior");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (SolutionComponentIncludeBehavior)(Enum.ToObject(typeof(SolutionComponentIncludeBehavior), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// The parent ID of the subcomponent, which will be a root
		/// </summary>
		[AttributeLogicalNameAttribute("rootsolutioncomponentid")]
		public Nullable<Guid> RootSolutionComponentID
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("rootsolutioncomponentid");
			}
		}
		
		/// <summary>
		/// Unique identifier of the solution component.
		/// </summary>
		[AttributeLogicalNameAttribute("solutioncomponentid")]
		public Nullable<Guid> SolutionComponentId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("solutioncomponentid");
			}
		}
		
		[AttributeLogicalNameAttribute("solutioncomponentid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				base.Id = value;
			}
		}
		
		/// <summary>
		/// Unique identifier of the solution.
		/// </summary>
		[AttributeLogicalNameAttribute("solutionid")]
		public EntityReference Solution
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("solutionid");
			}
		}
		
		public struct Fields
		{
			
			public static string ObjectTypeCode = "componenttype";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string IsThisComponentMetadata = "ismetadata";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string Regarding = "objectid";
			
			public static string RootComponentBehavior = "rootcomponentbehavior";
			
			public static string RootSolutionComponentID = "rootsolutioncomponentid";
			
			public static string SolutionComponentId = "solutioncomponentid";
			
			public static string Id = "solutioncomponentid";
			
			public static string Solution = "solutionid";
		}
	}
}
