//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aylos.Xrm.Sdk.BuildTools.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// A solution which contains CRM customizations.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("solution")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9479")]
	public partial class Solution : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Solution() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "solution";
		
		public const int EntityTypeCode = 7100;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// A link to an optional configuration page for this solution.
		/// </summary>
		[AttributeLogicalNameAttribute("configurationpageid")]
		public EntityReference ConfigurationPage
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("configurationpageid");
			}
			set
			{
				this.OnPropertyChanging("ConfigurationPage");
				this.SetAttributeValue("configurationpageid", value);
				this.OnPropertyChanged("ConfigurationPage");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the solution.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the solution was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Description of the solution.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// User display name for the solution.
		/// </summary>
		[AttributeLogicalNameAttribute("friendlyname")]
		public string DisplayName
		{
			get
			{
				return this.GetAttributeValue<string>("friendlyname");
			}
			set
			{
				this.OnPropertyChanging("DisplayName");
				this.SetAttributeValue("friendlyname", value);
				this.OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// Date and time when the solution was installed/upgraded.
		/// </summary>
		[AttributeLogicalNameAttribute("installedon")]
		public Nullable<DateTime> InstalledOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("installedon");
			}
		}
		
		/// <summary>
		/// Indicates whether the solution is managed or unmanaged.
		/// </summary>
		[AttributeLogicalNameAttribute("ismanaged")]
		public Nullable<bool> PackageType
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// Indicates whether the solution is visible outside of the platform.
		/// </summary>
		[AttributeLogicalNameAttribute("isvisible")]
		public Nullable<bool> IsVisibleOutsidePlatform
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isvisible");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the solution.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the solution was last modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization associated with the solution.
		/// </summary>
		[AttributeLogicalNameAttribute("organizationid")]
		public EntityReference Organization
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// Unique identifier of the parent solution. Should only be non-null if this solution is a patch.
		/// </summary>
		[AttributeLogicalNameAttribute("parentsolutionid")]
		public EntityReference ParentSolution
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("parentsolutionid");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("pinpointassetid")]
		public string PinpointAssetId
		{
			get
			{
				return this.GetAttributeValue<string>("pinpointassetid");
			}
		}
		
		/// <summary>
		/// Identifier of the publisher of this solution in Microsoft Pinpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("pinpointpublisherid")]
		public Nullable<long> PinpointPublisherId
		{
			get
			{
				return this.GetAttributeValue<Nullable<long>>("pinpointpublisherid");
			}
		}
		
		/// <summary>
		/// Default locale of the solution in Microsoft Pinpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("pinpointsolutiondefaultlocale")]
		public string PinpointSolutionDefaultLocale
		{
			get
			{
				return this.GetAttributeValue<string>("pinpointsolutiondefaultlocale");
			}
		}
		
		/// <summary>
		/// Identifier of the solution in Microsoft Pinpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("pinpointsolutionid")]
		public Nullable<long> PinpointSolutionId
		{
			get
			{
				return this.GetAttributeValue<Nullable<long>>("pinpointsolutionid");
			}
		}
		
		/// <summary>
		/// Unique identifier of the publisher.
		/// </summary>
		[AttributeLogicalNameAttribute("publisherid")]
		public EntityReference Publisher
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("publisherid");
			}
			set
			{
				this.OnPropertyChanging("Publisher");
				this.SetAttributeValue("publisherid", value);
				this.OnPropertyChanged("Publisher");
			}
		}
		
		/// <summary>
		/// Unique identifier of the solution.
		/// </summary>
		[AttributeLogicalNameAttribute("solutionid")]
		public Nullable<Guid> SolutionId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("solutionid");
			}
			set
			{
				this.OnPropertyChanging("SolutionId");
				this.SetAttributeValue("solutionid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("SolutionId");
			}
		}
		
		[AttributeLogicalNameAttribute("solutionid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.SolutionId = value;
			}
		}
		
		/// <summary>
		/// Solution package source organization version
		/// </summary>
		[AttributeLogicalNameAttribute("solutionpackageversion")]
		public string SolutionPackageVersion
		{
			get
			{
				return this.GetAttributeValue<string>("solutionpackageversion");
			}
			set
			{
				this.OnPropertyChanging("SolutionPackageVersion");
				this.SetAttributeValue("solutionpackageversion", value);
				this.OnPropertyChanged("SolutionPackageVersion");
			}
		}
		
		/// <summary>
		/// Solution Type
		/// </summary>
		[AttributeLogicalNameAttribute("solutiontype")]
		public Nullable<SolutionSolutionType> SolutionType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("solutiontype");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (SolutionSolutionType)(Enum.ToObject(typeof(SolutionSolutionType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("SolutionType");
				if (value == null)
				{
					this.SetAttributeValue("solutiontype", null);
				}
				else
				{
					this.SetAttributeValue("solutiontype", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("SolutionType");
			}
		}
		
		/// <summary>
		/// The unique name of this solution
		/// </summary>
		[AttributeLogicalNameAttribute("uniquename")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("uniquename");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("uniquename", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Date and time when the solution was updated.
		/// </summary>
		[AttributeLogicalNameAttribute("updatedon")]
		public Nullable<DateTime> UpdatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("updatedon");
			}
		}
		
		/// <summary>
		/// Solution version, used to identify a solution for upgrades and hotfixes.
		/// </summary>
		[AttributeLogicalNameAttribute("version")]
		public string Version
		{
			get
			{
				return this.GetAttributeValue<string>("version");
			}
			set
			{
				this.OnPropertyChanging("Version");
				this.SetAttributeValue("version", value);
				this.OnPropertyChanged("Version");
			}
		}
		
		public struct Fields
		{
			
			public static string ConfigurationPage = "configurationpageid";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string Description = "description";
			
			public static string DisplayName = "friendlyname";
			
			public static string InstalledOn = "installedon";
			
			public static string PackageType = "ismanaged";
			
			public static string IsVisibleOutsidePlatform = "isvisible";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string Organization = "organizationid";
			
			public static string ParentSolution = "parentsolutionid";
			
			public static string PinpointAssetId = "pinpointassetid";
			
			public static string PinpointPublisherId = "pinpointpublisherid";
			
			public static string PinpointSolutionDefaultLocale = "pinpointsolutiondefaultlocale";
			
			public static string PinpointSolutionId = "pinpointsolutionid";
			
			public static string Publisher = "publisherid";
			
			public static string SolutionId = "solutionid";
			
			public static string Id = "solutionid";
			
			public static string SolutionPackageVersion = "solutionpackageversion";
			
			public static string SolutionType = "solutiontype";
			
			public static string Name = "uniquename";
			
			public static string UpdatedOn = "updatedon";
			
			public static string Version = "version";
		}
	}
}
