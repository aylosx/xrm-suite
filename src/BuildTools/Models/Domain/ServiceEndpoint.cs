//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aylos.Xrm.Sdk.BuildTools.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Service endpoint that can be contacted.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("serviceendpoint")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.0.0.9479")]
	public partial class ServiceEndpoint : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public ServiceEndpoint() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "serviceendpoint";
		
		public const int EntityTypeCode = 4618;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Specifies mode of authentication with SB
		/// </summary>
		[AttributeLogicalNameAttribute("authtype")]
		public Nullable<ServiceEndpointAuthenticationTypeForServiceBus> SpecifiesModeOfAuthenticationWithSB
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("authtype");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ServiceEndpointAuthenticationTypeForServiceBus)(Enum.ToObject(typeof(ServiceEndpointAuthenticationTypeForServiceBus), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("SpecifiesModeOfAuthenticationWithSB");
				if (value == null)
				{
					this.SetAttributeValue("authtype", null);
				}
				else
				{
					this.SetAttributeValue("authtype", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("SpecifiesModeOfAuthenticationWithSB");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("componentstate")]
		public Nullable<GlobalComponentState> ComponentState
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("componentstate");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalComponentState)(Enum.ToObject(typeof(GlobalComponentState), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// Connection mode to contact the service endpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("connectionmode")]
		public Nullable<ServiceEndpointConnectionMode> ConnectionMode
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("connectionmode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ServiceEndpointConnectionMode)(Enum.ToObject(typeof(ServiceEndpointConnectionMode), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ConnectionMode");
				if (value == null)
				{
					this.SetAttributeValue("connectionmode", null);
				}
				else
				{
					this.SetAttributeValue("connectionmode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ConnectionMode");
			}
		}
		
		/// <summary>
		/// Type of the endpoint contract.
		/// </summary>
		[AttributeLogicalNameAttribute("contract")]
		public Nullable<ServiceEndpointContract> Contract
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("contract");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ServiceEndpointContract)(Enum.ToObject(typeof(ServiceEndpointContract), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Contract");
				if (value == null)
				{
					this.SetAttributeValue("contract", null);
				}
				else
				{
					this.SetAttributeValue("contract", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Contract");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the service endpoint.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the service endpoint was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Description of the service endpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Version in which the form is introduced.
		/// </summary>
		[AttributeLogicalNameAttribute("introducedversion")]
		public string IntroducedVersion
		{
			get
			{
				return this.GetAttributeValue<string>("introducedversion");
			}
			set
			{
				this.OnPropertyChanging("IntroducedVersion");
				this.SetAttributeValue("introducedversion", value);
				this.OnPropertyChanged("IntroducedVersion");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("isauthvalueset")]
		public Nullable<bool> IsAuthValueSet
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isauthvalueset");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component can be customized.
		/// </summary>
		[AttributeLogicalNameAttribute("iscustomizable")]
		public BooleanManagedProperty Customizable
		{
			get
			{
				return this.GetAttributeValue<BooleanManagedProperty>("iscustomizable");
			}
			set
			{
				this.OnPropertyChanging("Customizable");
				this.SetAttributeValue("iscustomizable", value);
				this.OnPropertyChanged("Customizable");
			}
		}
		
		/// <summary>
		/// Information that specifies whether this component is managed.
		/// </summary>
		[AttributeLogicalNameAttribute("ismanaged")]
		public Nullable<bool> State
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismanaged");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("issaskeyset")]
		public Nullable<bool> IsSASKeySet
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("issaskeyset");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("issastokenset")]
		public Nullable<bool> IsSASTokenSet
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("issastokenset");
			}
		}
		
		/// <summary>
		/// Content type of the message
		/// </summary>
		[AttributeLogicalNameAttribute("messageformat")]
		public Nullable<ServiceEndpointMessageFormat> ContentTypeOfTheMessage
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("messageformat");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ServiceEndpointMessageFormat)(Enum.ToObject(typeof(ServiceEndpointMessageFormat), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ContentTypeOfTheMessage");
				if (value == null)
				{
					this.SetAttributeValue("messageformat", null);
				}
				else
				{
					this.SetAttributeValue("messageformat", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ContentTypeOfTheMessage");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who last modified the service endpoint.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the service endpoint was last modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Name of Service end point.
		/// </summary>
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Full service endpoint address.
		/// </summary>
		[AttributeLogicalNameAttribute("namespaceaddress")]
		public string NamespaceAddress
		{
			get
			{
				return this.GetAttributeValue<string>("namespaceaddress");
			}
			set
			{
				this.OnPropertyChanging("NamespaceAddress");
				this.SetAttributeValue("namespaceaddress", value);
				this.OnPropertyChanged("NamespaceAddress");
			}
		}
		
		/// <summary>
		/// Format of Service Bus Namespace
		/// </summary>
		[AttributeLogicalNameAttribute("namespaceformat")]
		public Nullable<ServiceEndpointFormatForServiceBusNamespace> FormatOfServiceBusNamespace
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("namespaceformat");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ServiceEndpointFormatForServiceBusNamespace)(Enum.ToObject(typeof(ServiceEndpointFormatForServiceBusNamespace), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("FormatOfServiceBusNamespace");
				if (value == null)
				{
					this.SetAttributeValue("namespaceformat", null);
				}
				else
				{
					this.SetAttributeValue("namespaceformat", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("FormatOfServiceBusNamespace");
			}
		}
		
		/// <summary>
		/// Unique identifier of the organization with which the service endpoint is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("organizationid")]
		public EntityReference OrganizationId
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("organizationid");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("overwritetime")]
		public Nullable<DateTime> RecordOverwriteTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("overwritetime");
			}
		}
		
		/// <summary>
		/// Path to the service endpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("path")]
		public string Path
		{
			get
			{
				return this.GetAttributeValue<string>("path");
			}
			set
			{
				this.OnPropertyChanging("Path");
				this.SetAttributeValue("path", value);
				this.OnPropertyChanged("Path");
			}
		}
		
		/// <summary>
		/// Shared Access Key Name
		/// </summary>
		[AttributeLogicalNameAttribute("saskeyname")]
		public string SharedAccessKeyName
		{
			get
			{
				return this.GetAttributeValue<string>("saskeyname");
			}
			set
			{
				this.OnPropertyChanging("SharedAccessKeyName");
				this.SetAttributeValue("saskeyname", value);
				this.OnPropertyChanged("SharedAccessKeyName");
			}
		}
		
		/// <summary>
		/// Unique identifier of the service endpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("serviceendpointid")]
		public Nullable<Guid> ServiceEndpointId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("serviceendpointid");
			}
			set
			{
				this.OnPropertyChanging("ServiceEndpointId");
				this.SetAttributeValue("serviceendpointid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("ServiceEndpointId");
			}
		}
		
		[AttributeLogicalNameAttribute("serviceendpointid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.ServiceEndpointId = value;
			}
		}
		
		/// <summary>
		/// Unique identifier of the service endpoint.
		/// </summary>
		[AttributeLogicalNameAttribute("serviceendpointidunique")]
		public Nullable<Guid> ServiceEndpointIdUnique
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("serviceendpointidunique");
			}
		}
		
		/// <summary>
		/// Unique identifier of the associated solution.
		/// </summary>
		[AttributeLogicalNameAttribute("solutionid")]
		public Nullable<Guid> Solution
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("solutionid");
			}
		}
		
		/// <summary>
		/// Namespace of the App Fabric solution.
		/// </summary>
		[AttributeLogicalNameAttribute("solutionnamespace")]
		public string ServiceNamespace
		{
			get
			{
				return this.GetAttributeValue<string>("solutionnamespace");
			}
			set
			{
				this.OnPropertyChanging("ServiceNamespace");
				this.SetAttributeValue("solutionnamespace", value);
				this.OnPropertyChanged("ServiceNamespace");
			}
		}
		
		/// <summary>
		/// Full service endpoint Url.
		/// </summary>
		[AttributeLogicalNameAttribute("url")]
		public string UrlAddress
		{
			get
			{
				return this.GetAttributeValue<string>("url");
			}
			set
			{
				this.OnPropertyChanging("UrlAddress");
				this.SetAttributeValue("url", value);
				this.OnPropertyChanged("UrlAddress");
			}
		}
		
		/// <summary>
		/// Additional user claim value type.
		/// </summary>
		[AttributeLogicalNameAttribute("userclaim")]
		public Nullable<ServiceEndpointUserClaim> UserClaim
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("userclaim");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ServiceEndpointUserClaim)(Enum.ToObject(typeof(ServiceEndpointUserClaim), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("UserClaim");
				if (value == null)
				{
					this.SetAttributeValue("userclaim", null);
				}
				else
				{
					this.SetAttributeValue("userclaim", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("UserClaim");
			}
		}
		
		public struct Fields
		{
			
			public static string SpecifiesModeOfAuthenticationWithSB = "authtype";
			
			public static string ComponentState = "componentstate";
			
			public static string ConnectionMode = "connectionmode";
			
			public static string Contract = "contract";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string Description = "description";
			
			public static string IntroducedVersion = "introducedversion";
			
			public static string IsAuthValueSet = "isauthvalueset";
			
			public static string Customizable = "iscustomizable";
			
			public static string State = "ismanaged";
			
			public static string IsSASKeySet = "issaskeyset";
			
			public static string IsSASTokenSet = "issastokenset";
			
			public static string ContentTypeOfTheMessage = "messageformat";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string Name = "name";
			
			public static string NamespaceAddress = "namespaceaddress";
			
			public static string FormatOfServiceBusNamespace = "namespaceformat";
			
			public static string OrganizationId = "organizationid";
			
			public static string RecordOverwriteTime = "overwritetime";
			
			public static string Path = "path";
			
			public static string SharedAccessKeyName = "saskeyname";
			
			public static string ServiceEndpointId = "serviceendpointid";
			
			public static string Id = "serviceendpointid";
			
			public static string ServiceEndpointIdUnique = "serviceendpointidunique";
			
			public static string Solution = "solutionid";
			
			public static string ServiceNamespace = "solutionnamespace";
			
			public static string UrlAddress = "url";
			
			public static string UserClaim = "userclaim";
		}
	}
}
