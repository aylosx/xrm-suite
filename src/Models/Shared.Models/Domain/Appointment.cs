//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Commitment representing a time interval with start/end times and duration.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("appointment")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.95")]
	public partial class Appointment : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Appointment() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "appointment";
		
		public const string EntityLogicalCollectionName = "appointments";
		
		public const string EntitySetName = "appointments";
		
		public const int EntityTypeCode = 4201;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("activityadditionalparams")]
		public string AdditionalParameters
		{
			get
			{
				return this.GetAttributeValue<string>("activityadditionalparams");
			}
			set
			{
				this.OnPropertyChanging("AdditionalParameters");
				this.SetAttributeValue("activityadditionalparams", value);
				this.OnPropertyChanged("AdditionalParameters");
			}
		}
		
		/// <summary>
		/// Unique identifier of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("activityid")]
		public Nullable<Guid> AppointmentId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("activityid");
			}
			set
			{
				this.OnPropertyChanging("AppointmentId");
				this.SetAttributeValue("activityid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("AppointmentId");
			}
		}
		
		[AttributeLogicalNameAttribute("activityid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.AppointmentId = value;
			}
		}
		
		/// <summary>
		/// Type of activity.
		/// </summary>
		[AttributeLogicalNameAttribute("activitytypecode")]
		public string ActivityType
		{
			get
			{
				return this.GetAttributeValue<string>("activitytypecode");
			}
		}
		
		/// <summary>
		/// Shows the value selected in the Duration field on the appointment at the time that the appointment is closed as completed. The duration is used to report the time spent on the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("actualdurationminutes")]
		public Nullable<int> ActualDuration
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("actualdurationminutes");
			}
			set
			{
				this.OnPropertyChanging("ActualDuration");
				this.SetAttributeValue("actualdurationminutes", value);
				this.OnPropertyChanged("ActualDuration");
			}
		}
		
		/// <summary>
		/// Enter the actual end date and time of the appointment. By default, it displays the date and time when the activity was completed or canceled, but can be edited to capture the actual duration of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("actualend")]
		public Nullable<DateTime> ActualEnd
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("actualend");
			}
			set
			{
				this.OnPropertyChanging("ActualEnd");
				this.SetAttributeValue("actualend", value);
				this.OnPropertyChanged("ActualEnd");
			}
		}
		
		/// <summary>
		/// Enter the actual start date and time for the appointment. By default, it displays the date and time when the activity was created, but can be edited to capture the actual duration of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("actualstart")]
		public Nullable<DateTime> ActualStart
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("actualstart");
			}
			set
			{
				this.OnPropertyChanging("ActualStart");
				this.SetAttributeValue("actualstart", value);
				this.OnPropertyChanged("ActualStart");
			}
		}
		
		/// <summary>
		/// Shows the number of attachments on the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("attachmentcount")]
		public Nullable<int> AttachmentCount
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("attachmentcount");
			}
		}
		
		/// <summary>
		/// Select the error code to identify issues with the outlook item recipients or attachments, such as blocked attachments.
		/// </summary>
		[AttributeLogicalNameAttribute("attachmenterrors")]
		public Nullable<AppointmentAttachmentErrors> AttachmentErrors
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("attachmenterrors");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (AppointmentAttachmentErrors)(Enum.ToObject(typeof(AppointmentAttachmentErrors), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("AttachmentErrors");
				if (value == null)
				{
					this.SetAttributeValue("attachmenterrors", null);
				}
				else
				{
					this.SetAttributeValue("attachmenterrors", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("AttachmentErrors");
			}
		}
		
		/// <summary>
		/// Type a category to identify the appointment type, such as sales demo, prospect call, or service call, to tie the appointment to a business group or function.
		/// </summary>
		[AttributeLogicalNameAttribute("category")]
		public string Category
		{
			get
			{
				return this.GetAttributeValue<string>("category");
			}
			set
			{
				this.OnPropertyChanging("Category");
				this.SetAttributeValue("category", value);
				this.OnPropertyChanged("Category");
			}
		}
		
		/// <summary>
		/// Shows who created the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Type additional information to describe the purpose of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangerate")]
		public Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Shows the ID of the appointment in Microsoft Office Outlook. The ID is used to synchronize the appointment between Microsoft Dynamics 365 and the correct Exchange account.
		/// </summary>
		[AttributeLogicalNameAttribute("globalobjectid")]
		public string OutlookAppointment
		{
			get
			{
				return this.GetAttributeValue<string>("globalobjectid");
			}
			set
			{
				this.OnPropertyChanging("OutlookAppointment");
				this.SetAttributeValue("globalobjectid", value);
				this.OnPropertyChanged("OutlookAppointment");
			}
		}
		
		/// <summary>
		/// Type of instance of a recurring series.
		/// </summary>
		[AttributeLogicalNameAttribute("instancetypecode")]
		public Nullable<AppointmentAppointmentType> AppointmentType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("instancetypecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (AppointmentAppointmentType)(Enum.ToObject(typeof(AppointmentAppointmentType), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// Select whether the appointment is an all-day event to make sure that the required resources are scheduled for the full day.
		/// </summary>
		[AttributeLogicalNameAttribute("isalldayevent")]
		public Nullable<bool> AllDayEvent
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isalldayevent");
			}
			set
			{
				this.OnPropertyChanging("AllDayEvent");
				this.SetAttributeValue("isalldayevent", value);
				this.OnPropertyChanged("AllDayEvent");
			}
		}
		
		/// <summary>
		/// Information regarding whether the appointment was billed as part of resolving a case.
		/// </summary>
		[AttributeLogicalNameAttribute("isbilled")]
		public Nullable<bool> IsBilled
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isbilled");
			}
			set
			{
				this.OnPropertyChanging("IsBilled");
				this.SetAttributeValue("isbilled", value);
				this.OnPropertyChanged("IsBilled");
			}
		}
		
		/// <summary>
		/// Information regarding whether the appointment is a draft.
		/// </summary>
		[AttributeLogicalNameAttribute("isdraft")]
		public Nullable<bool> IsDraft
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isdraft");
			}
			set
			{
				this.OnPropertyChanging("IsDraft");
				this.SetAttributeValue("isdraft", value);
				this.OnPropertyChanged("IsDraft");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("ismapiprivate")]
		public Nullable<bool> IsPrivate
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismapiprivate");
			}
			set
			{
				this.OnPropertyChanging("IsPrivate");
				this.SetAttributeValue("ismapiprivate", value);
				this.OnPropertyChanged("IsPrivate");
			}
		}
		
		/// <summary>
		/// Displays whether or not this is an online meeting.
		/// </summary>
		[AttributeLogicalNameAttribute("isonlinemeeting")]
		public Nullable<bool> IsOnlineMeeting
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isonlinemeeting");
			}
			set
			{
				this.OnPropertyChanging("IsOnlineMeeting");
				this.SetAttributeValue("isonlinemeeting", value);
				this.OnPropertyChanged("IsOnlineMeeting");
			}
		}
		
		/// <summary>
		/// Information regarding whether the activity is a regular activity type or event type.
		/// </summary>
		[AttributeLogicalNameAttribute("isregularactivity")]
		public Nullable<bool> IsRegularActivity
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isregularactivity");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("isunsafe")]
		public Nullable<int> IsUnsafe
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("isunsafe");
			}
		}
		
		/// <summary>
		/// Information regarding whether the appointment was created from a workflow rule.
		/// </summary>
		[AttributeLogicalNameAttribute("isworkflowcreated")]
		public Nullable<bool> IsWorkflowCreated
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isworkflowcreated");
			}
			set
			{
				this.OnPropertyChanging("IsWorkflowCreated");
				this.SetAttributeValue("isworkflowcreated", value);
				this.OnPropertyChanged("IsWorkflowCreated");
			}
		}
		
		/// <summary>
		/// Contains the date and time stamp of the last on hold time.
		/// </summary>
		[AttributeLogicalNameAttribute("lastonholdtime")]
		public Nullable<DateTime> LastOnHoldTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("lastonholdtime");
			}
			set
			{
				this.OnPropertyChanging("LastOnHoldTime");
				this.SetAttributeValue("lastonholdtime", value);
				this.OnPropertyChanged("LastOnHoldTime");
			}
		}
		
		/// <summary>
		/// Type the location where the appointment will take place, such as a conference room or customer office.
		/// </summary>
		[AttributeLogicalNameAttribute("location")]
		public string Location
		{
			get
			{
				return this.GetAttributeValue<string>("location");
			}
			set
			{
				this.OnPropertyChanging("Location");
				this.SetAttributeValue("location", value);
				this.OnPropertyChanged("Location");
			}
		}
		
		/// <summary>
		/// Shows who last updated the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// For internal use only. 
		/// </summary>
		[AttributeLogicalNameAttribute("modifiedfieldsmask")]
		public string ModifiedFieldsMask
		{
			get
			{
				return this.GetAttributeValue<string>("modifiedfieldsmask");
			}
		}
		
		/// <summary>
		/// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Shows how long, in minutes, that the record was on hold.
		/// </summary>
		[AttributeLogicalNameAttribute("onholdtime")]
		public Nullable<int> OnHoldTimeMinutes
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("onholdtime");
			}
		}
		
		/// <summary>
		/// Shows the online meeting chat id.
		/// </summary>
		[AttributeLogicalNameAttribute("onlinemeetingchatid")]
		public string OnlineMeetingChatId
		{
			get
			{
				return this.GetAttributeValue<string>("onlinemeetingchatid");
			}
			set
			{
				this.OnPropertyChanging("OnlineMeetingChatId");
				this.SetAttributeValue("onlinemeetingchatid", value);
				this.OnPropertyChanged("OnlineMeetingChatId");
			}
		}
		
		/// <summary>
		/// Shows the online meeting id.
		/// </summary>
		[AttributeLogicalNameAttribute("onlinemeetingid")]
		public string OnlineMeetingId
		{
			get
			{
				return this.GetAttributeValue<string>("onlinemeetingid");
			}
			set
			{
				this.OnPropertyChanging("OnlineMeetingId");
				this.SetAttributeValue("onlinemeetingid", value);
				this.OnPropertyChanged("OnlineMeetingId");
			}
		}
		
		/// <summary>
		/// Shows the online meeting join url.
		/// </summary>
		[AttributeLogicalNameAttribute("onlinemeetingjoinurl")]
		public string OnlineMeetingJoinUrl
		{
			get
			{
				return this.GetAttributeValue<string>("onlinemeetingjoinurl");
			}
			set
			{
				this.OnPropertyChanging("OnlineMeetingJoinUrl");
				this.SetAttributeValue("onlinemeetingjoinurl", value);
				this.OnPropertyChanged("OnlineMeetingJoinUrl");
			}
		}
		
		/// <summary>
		/// Displays the online meeting type.
		/// </summary>
		[AttributeLogicalNameAttribute("onlinemeetingtype")]
		public Nullable<GlobalOnlineMeetingType> OnlineMeetingType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("onlinemeetingtype");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalOnlineMeetingType)(Enum.ToObject(typeof(GlobalOnlineMeetingType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("OnlineMeetingType");
				if (value == null)
				{
					this.SetAttributeValue("onlinemeetingtype", null);
				}
				else
				{
					this.SetAttributeValue("onlinemeetingtype", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("OnlineMeetingType");
			}
		}
		
		/// <summary>
		/// Enter the account, contact, lead, user, or other equipment resources that are not needed at the appointment, but can optionally attend.
		/// </summary>
		[AttributeLogicalNameAttribute("optionalattendees")]
		public IEnumerable<ActivityParty> OptionalAttendees
		{
			get
			{
				EntityCollection collection = this.GetAttributeValue<EntityCollection>("optionalattendees");
				if (((collection != null) 
							&& (collection.Entities != null)))
				{
					return Enumerable.Cast<ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("OptionalAttendees");
				if (value == null)
				{
					this.SetAttributeValue("optionalattendees", value);
				}
				else
				{
					this.SetAttributeValue("optionalattendees", new EntityCollection(new List<Entity>(value)));
				}
				this.OnPropertyChanged("OptionalAttendees");
			}
		}
		
		/// <summary>
		/// Enter the user who is in charge of coordinating or leading the appointment to make sure the appointment is displayed in the user's My Activities view.
		/// </summary>
		[AttributeLogicalNameAttribute("organizer")]
		public IEnumerable<ActivityParty> Organizer
		{
			get
			{
				EntityCollection collection = this.GetAttributeValue<EntityCollection>("organizer");
				if (((collection != null) 
							&& (collection.Entities != null)))
				{
					return Enumerable.Cast<ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("Organizer");
				if (value == null)
				{
					this.SetAttributeValue("organizer", value);
				}
				else
				{
					this.SetAttributeValue("organizer", new EntityCollection(new List<Entity>(value)));
				}
				this.OnPropertyChanged("Organizer");
			}
		}
		
		/// <summary>
		/// The original start date of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("originalstartdate")]
		public Nullable<DateTime> OriginalStartDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("originalstartdate");
			}
		}
		
		/// <summary>
		/// Unique identifier of the Microsoft Office Outlook appointment owner that correlates to the PR_OWNER_APPT_ID MAPI property.
		/// </summary>
		[AttributeLogicalNameAttribute("outlookownerapptid")]
		public Nullable<int> OutlookAppointmentOwner
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("outlookownerapptid");
			}
			set
			{
				this.OnPropertyChanging("OutlookAppointmentOwner");
				this.SetAttributeValue("outlookownerapptid", value);
				this.OnPropertyChanged("OutlookAppointmentOwner");
			}
		}
		
		/// <summary>
		/// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
		/// </summary>
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				this.OnPropertyChanging("Owner");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// Shows the business unit that the record owner belongs to.
		/// </summary>
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier of the team that owns the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user that owns the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Select the priority so that preferred customers or critical issues are handled quickly.
		/// </summary>
		[AttributeLogicalNameAttribute("prioritycode")]
		public Nullable<AppointmentPriority> Priority
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("prioritycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (AppointmentPriority)(Enum.ToObject(typeof(AppointmentPriority), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Priority");
				if (value == null)
				{
					this.SetAttributeValue("prioritycode", null);
				}
				else
				{
					this.SetAttributeValue("prioritycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// Shows the ID of the process.
		/// </summary>
		[AttributeLogicalNameAttribute("processid")]
		public Nullable<Guid> Process
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("processid");
			}
			set
			{
				this.OnPropertyChanging("Process");
				this.SetAttributeValue("processid", value);
				this.OnPropertyChanged("Process");
			}
		}
		
		/// <summary>
		/// Choose the record that the appointment relates to.
		/// </summary>
		[AttributeLogicalNameAttribute("regardingobjectid")]
		public EntityReference Regarding
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("regardingobjectid");
			}
			set
			{
				this.OnPropertyChanging("Regarding");
				this.SetAttributeValue("regardingobjectid", value);
				this.OnPropertyChanged("Regarding");
			}
		}
		
		/// <summary>
		/// Enter the account, contact, lead, user, or other equipment resources that are required to attend the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("requiredattendees")]
		public IEnumerable<ActivityParty> RequiredAttendees
		{
			get
			{
				EntityCollection collection = this.GetAttributeValue<EntityCollection>("requiredattendees");
				if (((collection != null) 
							&& (collection.Entities != null)))
				{
					return Enumerable.Cast<ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("RequiredAttendees");
				if (value == null)
				{
					this.SetAttributeValue("requiredattendees", value);
				}
				else
				{
					this.SetAttributeValue("requiredattendees", new EntityCollection(new List<Entity>(value)));
				}
				this.OnPropertyChanged("RequiredAttendees");
			}
		}
		
		/// <summary>
		/// Shows the expected duration of the appointment, in minutes.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduleddurationminutes")]
		public Nullable<int> Duration
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("scheduleddurationminutes");
			}
			set
			{
				this.OnPropertyChanging("Duration");
				this.SetAttributeValue("scheduleddurationminutes", value);
				this.OnPropertyChanged("Duration");
			}
		}
		
		/// <summary>
		/// Enter the expected due date and time for the activity to be completed to provide details about the timing of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduledend")]
		public Nullable<DateTime> EndTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("scheduledend");
			}
			set
			{
				this.OnPropertyChanging("EndTime");
				this.SetAttributeValue("scheduledend", value);
				this.OnPropertyChanged("EndTime");
			}
		}
		
		/// <summary>
		/// Enter the expected start date and time for the activity to provide details about the timing of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduledstart")]
		public Nullable<DateTime> StartTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("scheduledstart");
			}
			set
			{
				this.OnPropertyChanging("StartTime");
				this.SetAttributeValue("scheduledstart", value);
				this.OnPropertyChanged("StartTime");
			}
		}
		
		/// <summary>
		/// Shows the ID of the recurring series of an instance.
		/// </summary>
		[AttributeLogicalNameAttribute("seriesid")]
		public Nullable<Guid> SeriesId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("seriesid");
			}
		}
		
		/// <summary>
		/// Unique identifier for an associated service.
		/// </summary>
		[AttributeLogicalNameAttribute("serviceid")]
		public EntityReference Service
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("serviceid");
			}
			set
			{
				this.OnPropertyChanging("Service");
				this.SetAttributeValue("serviceid", value);
				this.OnPropertyChanged("Service");
			}
		}
		
		/// <summary>
		/// Choose the service level agreement (SLA) that you want to apply to the appointment record.
		/// </summary>
		[AttributeLogicalNameAttribute("slaid")]
		public EntityReference SLA
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slaid");
			}
			set
			{
				this.OnPropertyChanging("SLA");
				this.SetAttributeValue("slaid", value);
				this.OnPropertyChanged("SLA");
			}
		}
		
		/// <summary>
		/// Last SLA that was applied to this appointment. This field is for internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("slainvokedid")]
		public EntityReference LastSLAApplied
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slainvokedid");
			}
		}
		
		/// <summary>
		/// Shows the date and time by which the activities are sorted.
		/// </summary>
		[AttributeLogicalNameAttribute("sortdate")]
		public Nullable<DateTime> SortDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("sortdate");
			}
			set
			{
				this.OnPropertyChanging("SortDate");
				this.SetAttributeValue("sortdate", value);
				this.OnPropertyChanged("SortDate");
			}
		}
		
		/// <summary>
		/// Shows the ID of the stage.
		/// </summary>
		[AttributeLogicalNameAttribute("stageid")]
		public Nullable<Guid> DeprecatedProcessStage
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("stageid");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedProcessStage");
				this.SetAttributeValue("stageid", value);
				this.OnPropertyChanged("DeprecatedProcessStage");
			}
		}
		
		/// <summary>
		/// Shows whether the appointment is open, completed, or canceled. Completed and canceled appointments are read-only and can't be edited.
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<AppointmentState> State
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((AppointmentState)(Enum.ToObject(typeof(AppointmentState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("State");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// Select the appointment's status.
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<AppointmentStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((AppointmentStatusReason)(Enum.ToObject(typeof(AppointmentStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		/// <summary>
		/// Type a subcategory to identify the appointment type and relate the activity to a specific product, sales region, business group, or other function.
		/// </summary>
		[AttributeLogicalNameAttribute("subcategory")]
		public string SubCategory
		{
			get
			{
				return this.GetAttributeValue<string>("subcategory");
			}
			set
			{
				this.OnPropertyChanging("SubCategory");
				this.SetAttributeValue("subcategory", value);
				this.OnPropertyChanged("SubCategory");
			}
		}
		
		/// <summary>
		/// Type a short description about the objective or primary topic of the appointment.
		/// </summary>
		[AttributeLogicalNameAttribute("subject")]
		public string Subject
		{
			get
			{
				return this.GetAttributeValue<string>("subject");
			}
			set
			{
				this.OnPropertyChanging("Subject");
				this.SetAttributeValue("subject", value);
				this.OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// Choose the local currency for the record to make sure budgets are reported in the correct currency.
		/// </summary>
		[AttributeLogicalNameAttribute("transactioncurrencyid")]
		public EntityReference Currency
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.OnPropertyChanging("Currency");
				this.SetAttributeValue("transactioncurrencyid", value);
				this.OnPropertyChanged("Currency");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("traversedpath")]
		public string DeprecatedTraversedPath
		{
			get
			{
				return this.GetAttributeValue<string>("traversedpath");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedTraversedPath");
				this.SetAttributeValue("traversedpath", value);
				this.OnPropertyChanged("DeprecatedTraversedPath");
			}
		}
		
		public struct Fields
		{
			
			public static string AdditionalParameters = "activityadditionalparams";
			
			public static string AppointmentId = "activityid";
			
			public static string Id = "activityid";
			
			public static string ActivityType = "activitytypecode";
			
			public static string ActualDuration = "actualdurationminutes";
			
			public static string ActualEnd = "actualend";
			
			public static string ActualStart = "actualstart";
			
			public static string AttachmentCount = "attachmentcount";
			
			public static string AttachmentErrors = "attachmenterrors";
			
			public static string Category = "category";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string Description = "description";
			
			public static string ExchangeRate = "exchangerate";
			
			public static string OutlookAppointment = "globalobjectid";
			
			public static string AppointmentType = "instancetypecode";
			
			public static string AllDayEvent = "isalldayevent";
			
			public static string IsBilled = "isbilled";
			
			public static string IsDraft = "isdraft";
			
			public static string IsPrivate = "ismapiprivate";
			
			public static string IsOnlineMeeting = "isonlinemeeting";
			
			public static string IsRegularActivity = "isregularactivity";
			
			public static string IsUnsafe = "isunsafe";
			
			public static string IsWorkflowCreated = "isworkflowcreated";
			
			public static string LastOnHoldTime = "lastonholdtime";
			
			public static string Location = "location";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedFieldsMask = "modifiedfieldsmask";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string OnHoldTimeMinutes = "onholdtime";
			
			public static string OnlineMeetingChatId = "onlinemeetingchatid";
			
			public static string OnlineMeetingId = "onlinemeetingid";
			
			public static string OnlineMeetingJoinUrl = "onlinemeetingjoinurl";
			
			public static string OnlineMeetingType = "onlinemeetingtype";
			
			public static string OptionalAttendees = "optionalattendees";
			
			public static string Organizer = "organizer";
			
			public static string OriginalStartDate = "originalstartdate";
			
			public static string OutlookAppointmentOwner = "outlookownerapptid";
			
			public static string Owner = "ownerid";
			
			public static string OwningBusinessUnit = "owningbusinessunit";
			
			public static string OwningTeam = "owningteam";
			
			public static string OwningUser = "owninguser";
			
			public static string Priority = "prioritycode";
			
			public static string Process = "processid";
			
			public static string Regarding = "regardingobjectid";
			
			public static string RequiredAttendees = "requiredattendees";
			
			public static string Duration = "scheduleddurationminutes";
			
			public static string EndTime = "scheduledend";
			
			public static string StartTime = "scheduledstart";
			
			public static string SeriesId = "seriesid";
			
			public static string Service = "serviceid";
			
			public static string SLA = "slaid";
			
			public static string LastSLAApplied = "slainvokedid";
			
			public static string SortDate = "sortdate";
			
			public static string DeprecatedProcessStage = "stageid";
			
			public static string State = "statecode";
			
			public static string StatusReason = "statuscode";
			
			public static string SubCategory = "subcategory";
			
			public static string Subject = "subject";
			
			public static string Currency = "transactioncurrencyid";
			
			public static string DeprecatedTraversedPath = "traversedpath";
		}
	}
}
