//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Allows creation of multiple sub statuses mapped to a booking status option.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("bookingstatus")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.95")]
	public partial class BookingStatus : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public BookingStatus() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "bookingstatus";
		
		public const string EntityLogicalCollectionName = "bookingstatuses";
		
		public const string EntitySetName = "bookingstatuses";
		
		public const int EntityTypeCode = 1152;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Unique identifier of the booking status.
		/// </summary>
		[AttributeLogicalNameAttribute("bookingstatusid")]
		public Nullable<Guid> BookingStatusId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("bookingstatusid");
			}
			set
			{
				this.OnPropertyChanging("BookingStatusId");
				this.SetAttributeValue("bookingstatusid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("BookingStatusId");
			}
		}
		
		[AttributeLogicalNameAttribute("bookingstatusid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.BookingStatusId = value;
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Type a detailed description for the booking status.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Exchange rate for the currency associated with the bookingstatus with respect to the base currency.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangerate")]
		public Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who modified the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// The URL for a web resource image.
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_imageurl")]
		public string ImageUrl
		{
			get
			{
				return this.GetAttributeValue<string>("msdyn_imageurl");
			}
			set
			{
				this.OnPropertyChanging("ImageUrl");
				this.SetAttributeValue("msdyn_imageurl", value);
				this.OnPropertyChanged("ImageUrl");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_serviceappointmentstatus")]
		public Nullable<GlobalServiceAppointmentStatus> ServiceAppointmentStatus
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("msdyn_serviceappointmentstatus");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalServiceAppointmentStatus)(Enum.ToObject(typeof(GlobalServiceAppointmentStatus), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ServiceAppointmentStatus");
				if (value == null)
				{
					this.SetAttributeValue("msdyn_serviceappointmentstatus", null);
				}
				else
				{
					this.SetAttributeValue("msdyn_serviceappointmentstatus", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ServiceAppointmentStatus");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_statuscolor")]
		public string StatusColor
		{
			get
			{
				return this.GetAttributeValue<string>("msdyn_statuscolor");
			}
			set
			{
				this.OnPropertyChanging("StatusColor");
				this.SetAttributeValue("msdyn_statuscolor", value);
				this.OnPropertyChanged("StatusColor");
			}
		}
		
		/// <summary>
		/// Type the name of the booking status.
		/// </summary>
		[AttributeLogicalNameAttribute("name")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("name");
			}
			set
			{
				this.OnPropertyChanging("Name");
				this.SetAttributeValue("name", value);
				this.OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// Owner Id
		/// </summary>
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				this.OnPropertyChanging("Owner");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record
		/// </summary>
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Status of the Booking Status
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<BookingStatusState> State
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((BookingStatusState)(Enum.ToObject(typeof(BookingStatusState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("State");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// Select whether the booking status should be proposed, committed or canceled.
		/// </summary>
		[AttributeLogicalNameAttribute("status")]
		public Nullable<BookingStatusStatus> Status
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("status");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (BookingStatusStatus)(Enum.ToObject(typeof(BookingStatusStatus), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Status");
				if (value == null)
				{
					this.SetAttributeValue("status", null);
				}
				else
				{
					this.SetAttributeValue("status", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// Reason for the status of the Booking Status
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<BookingStatusStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((BookingStatusStatusReason)(Enum.ToObject(typeof(BookingStatusStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		/// <summary>
		/// Exchange rate for the currency associated with the BookingStatus with respect to the base currency.
		/// </summary>
		[AttributeLogicalNameAttribute("transactioncurrencyid")]
		public EntityReference Currency
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.OnPropertyChanging("Currency");
				this.SetAttributeValue("transactioncurrencyid", value);
				this.OnPropertyChanged("Currency");
			}
		}
		
		public struct Fields
		{
			
			public static string BookingStatusId = "bookingstatusid";
			
			public static string Id = "bookingstatusid";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string Description = "description";
			
			public static string ExchangeRate = "exchangerate";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string ImageUrl = "msdyn_imageurl";
			
			public static string ServiceAppointmentStatus = "msdyn_serviceappointmentstatus";
			
			public static string StatusColor = "msdyn_statuscolor";
			
			public static string Name = "name";
			
			public static string Owner = "ownerid";
			
			public static string OwningBusinessUnit = "owningbusinessunit";
			
			public static string OwningTeam = "owningteam";
			
			public static string OwningUser = "owninguser";
			
			public static string State = "statecode";
			
			public static string Status = "status";
			
			public static string StatusReason = "statuscode";
			
			public static string Currency = "transactioncurrencyid";
		}
	}
}
