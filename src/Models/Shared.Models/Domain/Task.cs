//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Generic activity representing work needed to be done.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("task")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.95")]
	public partial class Task : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Task() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "task";
		
		public const string EntityLogicalCollectionName = "tasks";
		
		public const string EntitySetName = "tasks";
		
		public const int EntityTypeCode = 4212;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("activityadditionalparams")]
		public string AdditionalParameters
		{
			get
			{
				return this.GetAttributeValue<string>("activityadditionalparams");
			}
			set
			{
				this.OnPropertyChanging("AdditionalParameters");
				this.SetAttributeValue("activityadditionalparams", value);
				this.OnPropertyChanged("AdditionalParameters");
			}
		}
		
		/// <summary>
		/// Unique identifier of the task.
		/// </summary>
		[AttributeLogicalNameAttribute("activityid")]
		public Nullable<Guid> TaskId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("activityid");
			}
			set
			{
				this.OnPropertyChanging("TaskId");
				this.SetAttributeValue("activityid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("TaskId");
			}
		}
		
		[AttributeLogicalNameAttribute("activityid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.TaskId = value;
			}
		}
		
		/// <summary>
		/// Type of activity.
		/// </summary>
		[AttributeLogicalNameAttribute("activitytypecode")]
		public string ActivityType
		{
			get
			{
				return this.GetAttributeValue<string>("activitytypecode");
			}
		}
		
		/// <summary>
		/// Type the number of minutes spent on the task. The duration is used in reporting.
		/// </summary>
		[AttributeLogicalNameAttribute("actualdurationminutes")]
		public Nullable<int> Duration
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("actualdurationminutes");
			}
			set
			{
				this.OnPropertyChanging("Duration");
				this.SetAttributeValue("actualdurationminutes", value);
				this.OnPropertyChanged("Duration");
			}
		}
		
		/// <summary>
		/// Enter the actual end date and time of the task. By default, it displays when the activity was completed or canceled.
		/// </summary>
		[AttributeLogicalNameAttribute("actualend")]
		public Nullable<DateTime> ActualEnd
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("actualend");
			}
			set
			{
				this.OnPropertyChanging("ActualEnd");
				this.SetAttributeValue("actualend", value);
				this.OnPropertyChanged("ActualEnd");
			}
		}
		
		/// <summary>
		/// Enter the actual start date and time for the task. By default, it displays when the task was created.
		/// </summary>
		[AttributeLogicalNameAttribute("actualstart")]
		public Nullable<DateTime> ActualStart
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("actualstart");
			}
			set
			{
				this.OnPropertyChanging("ActualStart");
				this.SetAttributeValue("actualstart", value);
				this.OnPropertyChanged("ActualStart");
			}
		}
		
		/// <summary>
		/// Type a category to identify the task type, such as lead gathering or customer follow up, to tie the task to a business group or function.
		/// </summary>
		[AttributeLogicalNameAttribute("category")]
		public string Category
		{
			get
			{
				return this.GetAttributeValue<string>("category");
			}
			set
			{
				this.OnPropertyChanging("Category");
				this.SetAttributeValue("category", value);
				this.OnPropertyChanged("Category");
			}
		}
		
		/// <summary>
		/// Shows who created the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Shows the date and time when the record was created. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Assigned Task Unique Id
		/// </summary>
		[AttributeLogicalNameAttribute("crmtaskassigneduniqueid")]
		public Nullable<Guid> AssignedTaskUniqueId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("crmtaskassigneduniqueid");
			}
			set
			{
				this.OnPropertyChanging("AssignedTaskUniqueId");
				this.SetAttributeValue("crmtaskassigneduniqueid", value);
				this.OnPropertyChanged("AssignedTaskUniqueId");
			}
		}
		
		/// <summary>
		/// Type additional information to describe the task.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangerate")]
		public Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Information which specifies whether the task was billed as part of resolving a case.
		/// </summary>
		[AttributeLogicalNameAttribute("isbilled")]
		public Nullable<bool> IsBilled
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isbilled");
			}
			set
			{
				this.OnPropertyChanging("IsBilled");
				this.SetAttributeValue("isbilled", value);
				this.OnPropertyChanged("IsBilled");
			}
		}
		
		/// <summary>
		/// Information regarding whether the activity is a regular activity type or event type.
		/// </summary>
		[AttributeLogicalNameAttribute("isregularactivity")]
		public Nullable<bool> IsRegularActivity
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isregularactivity");
			}
		}
		
		/// <summary>
		/// Information which specifies if the task was created from a workflow rule.
		/// </summary>
		[AttributeLogicalNameAttribute("isworkflowcreated")]
		public Nullable<bool> IsWorkflowCreated
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isworkflowcreated");
			}
			set
			{
				this.OnPropertyChanging("IsWorkflowCreated");
				this.SetAttributeValue("isworkflowcreated", value);
				this.OnPropertyChanged("IsWorkflowCreated");
			}
		}
		
		/// <summary>
		/// Contains the date and time stamp of the last on hold time.
		/// </summary>
		[AttributeLogicalNameAttribute("lastonholdtime")]
		public Nullable<DateTime> LastOnHoldTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("lastonholdtime");
			}
			set
			{
				this.OnPropertyChanging("LastOnHoldTime");
				this.SetAttributeValue("lastonholdtime", value);
				this.OnPropertyChanged("LastOnHoldTime");
			}
		}
		
		/// <summary>
		/// Shows who last updated the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Shows the date and time when the record was last updated. The date and time are displayed in the time zone selected in Microsoft Dynamics 365 options.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Shows how long, in minutes, that the record was on hold.
		/// </summary>
		[AttributeLogicalNameAttribute("onholdtime")]
		public Nullable<int> OnHoldTimeMinutes
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("onholdtime");
			}
		}
		
		/// <summary>
		/// Enter the user or team who is assigned to manage the record. This field is updated every time the record is assigned to a different user.
		/// </summary>
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				this.OnPropertyChanging("Owner");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// Shows the record owner's business unit.
		/// </summary>
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier of the team that owns the task.
		/// </summary>
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user that owns the task.
		/// </summary>
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Type the percentage complete value for the task to track tasks to completion.
		/// </summary>
		[AttributeLogicalNameAttribute("percentcomplete")]
		public Nullable<int> PercentComplete
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("percentcomplete");
			}
			set
			{
				this.OnPropertyChanging("PercentComplete");
				this.SetAttributeValue("percentcomplete", value);
				this.OnPropertyChanged("PercentComplete");
			}
		}
		
		/// <summary>
		/// Select the priority so that preferred customers or critical issues are handled quickly.
		/// </summary>
		[AttributeLogicalNameAttribute("prioritycode")]
		public Nullable<TaskPriority> Priority
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("prioritycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (TaskPriority)(Enum.ToObject(typeof(TaskPriority), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Priority");
				if (value == null)
				{
					this.SetAttributeValue("prioritycode", null);
				}
				else
				{
					this.SetAttributeValue("prioritycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// Shows the ID of the process.
		/// </summary>
		[AttributeLogicalNameAttribute("processid")]
		public Nullable<Guid> Process
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("processid");
			}
			set
			{
				this.OnPropertyChanging("Process");
				this.SetAttributeValue("processid", value);
				this.OnPropertyChanged("Process");
			}
		}
		
		/// <summary>
		/// Choose the record that the task relates to.
		/// </summary>
		[AttributeLogicalNameAttribute("regardingobjectid")]
		public EntityReference Regarding
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("regardingobjectid");
			}
			set
			{
				this.OnPropertyChanging("Regarding");
				this.SetAttributeValue("regardingobjectid", value);
				this.OnPropertyChanged("Regarding");
			}
		}
		
		/// <summary>
		/// Scheduled duration of the task, specified in minutes.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduleddurationminutes")]
		public Nullable<int> ScheduledDuration
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("scheduleddurationminutes");
			}
		}
		
		/// <summary>
		/// Enter the expected due date and time.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduledend")]
		public Nullable<DateTime> DueDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("scheduledend");
			}
			set
			{
				this.OnPropertyChanging("DueDate");
				this.SetAttributeValue("scheduledend", value);
				this.OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// Enter the expected due date and time.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduledstart")]
		public Nullable<DateTime> StartDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("scheduledstart");
			}
			set
			{
				this.OnPropertyChanging("StartDate");
				this.SetAttributeValue("scheduledstart", value);
				this.OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// Choose the service that is associated with this activity.
		/// </summary>
		[AttributeLogicalNameAttribute("serviceid")]
		public EntityReference Service
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("serviceid");
			}
			set
			{
				this.OnPropertyChanging("Service");
				this.SetAttributeValue("serviceid", value);
				this.OnPropertyChanged("Service");
			}
		}
		
		/// <summary>
		/// Choose the service level agreement (SLA) that you want to apply to the Task record.
		/// </summary>
		[AttributeLogicalNameAttribute("slaid")]
		public EntityReference SLA
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slaid");
			}
			set
			{
				this.OnPropertyChanging("SLA");
				this.SetAttributeValue("slaid", value);
				this.OnPropertyChanged("SLA");
			}
		}
		
		/// <summary>
		/// Last SLA that was applied to this Task. This field is for internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("slainvokedid")]
		public EntityReference LastSLAApplied
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slainvokedid");
			}
		}
		
		/// <summary>
		/// Shows the date and time by which the activities are sorted.
		/// </summary>
		[AttributeLogicalNameAttribute("sortdate")]
		public Nullable<DateTime> SortDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("sortdate");
			}
			set
			{
				this.OnPropertyChanging("SortDate");
				this.SetAttributeValue("sortdate", value);
				this.OnPropertyChanged("SortDate");
			}
		}
		
		/// <summary>
		/// Shows the ID of the stage.
		/// </summary>
		[AttributeLogicalNameAttribute("stageid")]
		public Nullable<Guid> DeprecatedProcessStage
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("stageid");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedProcessStage");
				this.SetAttributeValue("stageid", value);
				this.OnPropertyChanged("DeprecatedProcessStage");
			}
		}
		
		/// <summary>
		/// Shows whether the task is open, completed, or canceled. Completed and canceled tasks are read-only and can't be edited.
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<TaskState> State
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((TaskState)(Enum.ToObject(typeof(TaskState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("State");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// Select the task's status.
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<TaskStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((TaskStatusReason)(Enum.ToObject(typeof(TaskStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		/// <summary>
		/// Type a subcategory to identify the task type and relate the activity to a specific product, sales region, business group, or other function.
		/// </summary>
		[AttributeLogicalNameAttribute("subcategory")]
		public string SubCategory
		{
			get
			{
				return this.GetAttributeValue<string>("subcategory");
			}
			set
			{
				this.OnPropertyChanging("SubCategory");
				this.SetAttributeValue("subcategory", value);
				this.OnPropertyChanged("SubCategory");
			}
		}
		
		/// <summary>
		/// Type a short description about the objective or primary topic of the task.
		/// </summary>
		[AttributeLogicalNameAttribute("subject")]
		public string Subject
		{
			get
			{
				return this.GetAttributeValue<string>("subject");
			}
			set
			{
				this.OnPropertyChanging("Subject");
				this.SetAttributeValue("subject", value);
				this.OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// Choose the local currency for the record to make sure budgets are reported in the correct currency.
		/// </summary>
		[AttributeLogicalNameAttribute("transactioncurrencyid")]
		public EntityReference Currency
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.OnPropertyChanging("Currency");
				this.SetAttributeValue("transactioncurrencyid", value);
				this.OnPropertyChanged("Currency");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("traversedpath")]
		public string DeprecatedTraversedPath
		{
			get
			{
				return this.GetAttributeValue<string>("traversedpath");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedTraversedPath");
				this.SetAttributeValue("traversedpath", value);
				this.OnPropertyChanged("DeprecatedTraversedPath");
			}
		}
		
		public struct Fields
		{
			
			public static string AdditionalParameters = "activityadditionalparams";
			
			public static string TaskId = "activityid";
			
			public static string Id = "activityid";
			
			public static string ActivityType = "activitytypecode";
			
			public static string Duration = "actualdurationminutes";
			
			public static string ActualEnd = "actualend";
			
			public static string ActualStart = "actualstart";
			
			public static string Category = "category";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string AssignedTaskUniqueId = "crmtaskassigneduniqueid";
			
			public static string Description = "description";
			
			public static string ExchangeRate = "exchangerate";
			
			public static string IsBilled = "isbilled";
			
			public static string IsRegularActivity = "isregularactivity";
			
			public static string IsWorkflowCreated = "isworkflowcreated";
			
			public static string LastOnHoldTime = "lastonholdtime";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string OnHoldTimeMinutes = "onholdtime";
			
			public static string Owner = "ownerid";
			
			public static string OwningBusinessUnit = "owningbusinessunit";
			
			public static string OwningTeam = "owningteam";
			
			public static string OwningUser = "owninguser";
			
			public static string PercentComplete = "percentcomplete";
			
			public static string Priority = "prioritycode";
			
			public static string Process = "processid";
			
			public static string Regarding = "regardingobjectid";
			
			public static string ScheduledDuration = "scheduleddurationminutes";
			
			public static string DueDate = "scheduledend";
			
			public static string StartDate = "scheduledstart";
			
			public static string Service = "serviceid";
			
			public static string SLA = "slaid";
			
			public static string LastSLAApplied = "slainvokedid";
			
			public static string SortDate = "sortdate";
			
			public static string DeprecatedProcessStage = "stageid";
			
			public static string State = "statecode";
			
			public static string StatusReason = "statuscode";
			
			public static string SubCategory = "subcategory";
			
			public static string Subject = "subject";
			
			public static string Currency = "transactioncurrencyid";
			
			public static string DeprecatedTraversedPath = "traversedpath";
		}
	}
}
