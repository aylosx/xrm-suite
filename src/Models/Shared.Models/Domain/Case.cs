//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Service request case associated with a contract.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("incident")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.95")]
	public partial class Case : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Case() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "incident";
		
		public const string EntityLogicalCollectionName = "incidents";
		
		public const string EntitySetName = "incidents";
		
		public const int EntityTypeCode = 112;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Unique identifier of the account with which the case is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("accountid")]
		public EntityReference Account
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("accountid");
			}
		}
		
		/// <summary>
		/// This attribute is used for Sample Service Business Processes.
		/// </summary>
		[AttributeLogicalNameAttribute("activitiescomplete")]
		public Nullable<bool> ActivitiesComplete
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("activitiescomplete");
			}
			set
			{
				this.OnPropertyChanging("ActivitiesComplete");
				this.SetAttributeValue("activitiescomplete", value);
				this.OnPropertyChanged("ActivitiesComplete");
			}
		}
		
		/// <summary>
		/// Type the number of service units that were actually required to resolve the case.
		/// </summary>
		[AttributeLogicalNameAttribute("actualserviceunits")]
		public Nullable<int> ActualServiceUnits
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("actualserviceunits");
			}
			set
			{
				this.OnPropertyChanging("ActualServiceUnits");
				this.SetAttributeValue("actualserviceunits", value);
				this.OnPropertyChanged("ActualServiceUnits");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("adx_createdbyipaddress")]
		public string CreatedByIPAddress
		{
			get
			{
				return this.GetAttributeValue<string>("adx_createdbyipaddress");
			}
			set
			{
				this.OnPropertyChanging("CreatedByIPAddress");
				this.SetAttributeValue("adx_createdbyipaddress", value);
				this.OnPropertyChanged("CreatedByIPAddress");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("adx_createdbyusername")]
		public string CreatedByUsername
		{
			get
			{
				return this.GetAttributeValue<string>("adx_createdbyusername");
			}
			set
			{
				this.OnPropertyChanging("CreatedByUsername");
				this.SetAttributeValue("adx_createdbyusername", value);
				this.OnPropertyChanged("CreatedByUsername");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("adx_modifiedbyipaddress")]
		public string ModifiedByIPAddress
		{
			get
			{
				return this.GetAttributeValue<string>("adx_modifiedbyipaddress");
			}
			set
			{
				this.OnPropertyChanging("ModifiedByIPAddress");
				this.SetAttributeValue("adx_modifiedbyipaddress", value);
				this.OnPropertyChanged("ModifiedByIPAddress");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("adx_modifiedbyusername")]
		public string ModifiedByUsername
		{
			get
			{
				return this.GetAttributeValue<string>("adx_modifiedbyusername");
			}
			set
			{
				this.OnPropertyChanging("ModifiedByUsername");
				this.SetAttributeValue("adx_modifiedbyusername", value);
				this.OnPropertyChanged("ModifiedByUsername");
			}
		}
		
		/// <summary>
		/// If set to Yes, the case will be visible and searchable on portals connected to this organization.
		/// </summary>
		[AttributeLogicalNameAttribute("adx_publishtoweb")]
		public Nullable<bool> PublishToWeb
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("adx_publishtoweb");
			}
			set
			{
				this.OnPropertyChanging("PublishToWeb");
				this.SetAttributeValue("adx_publishtoweb", value);
				this.OnPropertyChanged("PublishToWeb");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("adx_resolution")]
		public string Resolution
		{
			get
			{
				return this.GetAttributeValue<string>("adx_resolution");
			}
			set
			{
				this.OnPropertyChanging("Resolution");
				this.SetAttributeValue("adx_resolution", value);
				this.OnPropertyChanged("Resolution");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("adx_resolutiondate")]
		public Nullable<DateTime> ResolutionDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("adx_resolutiondate");
			}
			set
			{
				this.OnPropertyChanging("ResolutionDate");
				this.SetAttributeValue("adx_resolutiondate", value);
				this.OnPropertyChanged("ResolutionDate");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("adx_stepstoreproduce")]
		public string StepsToReproduce
		{
			get
			{
				return this.GetAttributeValue<string>("adx_stepstoreproduce");
			}
			set
			{
				this.OnPropertyChanging("StepsToReproduce");
				this.SetAttributeValue("adx_stepstoreproduce", value);
				this.OnPropertyChanged("StepsToReproduce");
			}
		}
		
		/// <summary>
		/// Type the number of service units that were billed to the customer for the case.
		/// </summary>
		[AttributeLogicalNameAttribute("billedserviceunits")]
		public Nullable<int> BilledServiceUnits
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("billedserviceunits");
			}
			set
			{
				this.OnPropertyChanging("BilledServiceUnits");
				this.SetAttributeValue("billedserviceunits", value);
				this.OnPropertyChanged("BilledServiceUnits");
			}
		}
		
		/// <summary>
		/// Details whether the profile is blocked or not.
		/// </summary>
		[AttributeLogicalNameAttribute("blockedprofile")]
		public Nullable<bool> BlockedProfile
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("blockedprofile");
			}
			set
			{
				this.OnPropertyChanging("BlockedProfile");
				this.SetAttributeValue("blockedprofile", value);
				this.OnPropertyChanged("BlockedProfile");
			}
		}
		
		/// <summary>
		/// Shows the duration for which the Case has been active for Active and Resolved Cases.
		/// </summary>
		[AttributeLogicalNameAttribute("caseage")]
		public string CaseAge
		{
			get
			{
				return this.GetAttributeValue<string>("caseage");
			}
		}
		
		/// <summary>
		/// Select how contact about the case was originated, such as email, phone, or web, for use in reporting and analysis.
		/// </summary>
		[AttributeLogicalNameAttribute("caseorigincode")]
		public Nullable<GlobalCaseOrigin> Origin
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("caseorigincode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalCaseOrigin)(Enum.ToObject(typeof(GlobalCaseOrigin), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Origin");
				if (value == null)
				{
					this.SetAttributeValue("caseorigincode", null);
				}
				else
				{
					this.SetAttributeValue("caseorigincode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Origin");
			}
		}
		
		/// <summary>
		/// Select the type of case to identify the incident for use in case routing and analysis.
		/// </summary>
		[AttributeLogicalNameAttribute("casetypecode")]
		public Nullable<CaseCaseType> CaseType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("casetypecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CaseCaseType)(Enum.ToObject(typeof(CaseCaseType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("CaseType");
				if (value == null)
				{
					this.SetAttributeValue("casetypecode", null);
				}
				else
				{
					this.SetAttributeValue("casetypecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("CaseType");
			}
		}
		
		/// <summary>
		/// This attribute is used for Sample Service Business Processes.
		/// </summary>
		[AttributeLogicalNameAttribute("checkemail")]
		public Nullable<bool> CheckEmail
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("checkemail");
			}
			set
			{
				this.OnPropertyChanging("CheckEmail");
				this.SetAttributeValue("checkemail", value);
				this.OnPropertyChanged("CheckEmail");
			}
		}
		
		/// <summary>
		/// Unique identifier of the contact associated with the case.
		/// </summary>
		[AttributeLogicalNameAttribute("contactid")]
		public EntityReference Contact
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("contactid");
			}
		}
		
		/// <summary>
		/// Choose the contract line that the case should be logged under to make sure the customer is charged correctly.
		/// </summary>
		[AttributeLogicalNameAttribute("contractdetailid")]
		public EntityReference ContractLine
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("contractdetailid");
			}
			set
			{
				this.OnPropertyChanging("ContractLine");
				this.SetAttributeValue("contractdetailid", value);
				this.OnPropertyChanged("ContractLine");
			}
		}
		
		/// <summary>
		/// Choose the service contract that the case should be logged under to make sure the customer is eligible for support services.
		/// </summary>
		[AttributeLogicalNameAttribute("contractid")]
		public EntityReference Contract
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("contractid");
			}
			set
			{
				this.OnPropertyChanging("Contract");
				this.SetAttributeValue("contractid", value);
				this.OnPropertyChanged("Contract");
			}
		}
		
		/// <summary>
		/// Select the service level for the case to make sure the case is handled correctly.
		/// </summary>
		[AttributeLogicalNameAttribute("contractservicelevelcode")]
		public Nullable<CaseServiceLevel> ServiceLevel
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("contractservicelevelcode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CaseServiceLevel)(Enum.ToObject(typeof(CaseServiceLevel), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ServiceLevel");
				if (value == null)
				{
					this.SetAttributeValue("contractservicelevelcode", null);
				}
				else
				{
					this.SetAttributeValue("contractservicelevelcode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ServiceLevel");
			}
		}
		
		/// <summary>
		/// Shows who created the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Shows the external party who created the record.
		/// </summary>
		[AttributeLogicalNameAttribute("createdbyexternalparty")]
		public EntityReference CreatedByExternalParty
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdbyexternalparty");
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Tells whether customer service representative has contacted the customer or not.
		/// </summary>
		[AttributeLogicalNameAttribute("customercontacted")]
		public Nullable<bool> CustomerContacted
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("customercontacted");
			}
			set
			{
				this.OnPropertyChanging("CustomerContacted");
				this.SetAttributeValue("customercontacted", value);
				this.OnPropertyChanged("CustomerContacted");
			}
		}
		
		/// <summary>
		/// Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.
		/// </summary>
		[AttributeLogicalNameAttribute("customerid")]
		public EntityReference Customer
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("customerid");
			}
			set
			{
				this.OnPropertyChanging("Customer");
				this.SetAttributeValue("customerid", value);
				this.OnPropertyChanged("Customer");
			}
		}
		
		/// <summary>
		/// Select the customer's level of satisfaction with the handling and resolution of the case.
		/// </summary>
		[AttributeLogicalNameAttribute("customersatisfactioncode")]
		public Nullable<CaseSatisfaction> Satisfaction
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("customersatisfactioncode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CaseSatisfaction)(Enum.ToObject(typeof(CaseSatisfaction), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Satisfaction");
				if (value == null)
				{
					this.SetAttributeValue("customersatisfactioncode", null);
				}
				else
				{
					this.SetAttributeValue("customersatisfactioncode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Satisfaction");
			}
		}
		
		/// <summary>
		/// Shows the date time when the Case was resolved.
		/// </summary>
		[AttributeLogicalNameAttribute("deactivatedon")]
		public Nullable<DateTime> DeactivatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("deactivatedon");
			}
			set
			{
				this.OnPropertyChanging("DeactivatedOn");
				this.SetAttributeValue("deactivatedon", value);
				this.OnPropertyChanged("DeactivatedOn");
			}
		}
		
		/// <summary>
		/// Shows whether terms of the associated entitlement should be decremented or not.
		/// </summary>
		[AttributeLogicalNameAttribute("decremententitlementterm")]
		public Nullable<bool> DecrementEntitlementTerms
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("decremententitlementterm");
			}
			set
			{
				this.OnPropertyChanging("DecrementEntitlementTerms");
				this.SetAttributeValue("decremententitlementterm", value);
				this.OnPropertyChanged("DecrementEntitlementTerms");
			}
		}
		
		/// <summary>
		/// Type additional information to describe the case to assist the service team in reaching a resolution.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// The primary email address for the entity.
		/// </summary>
		[AttributeLogicalNameAttribute("emailaddress")]
		public string EmailAddress
		{
			get
			{
				return this.GetAttributeValue<string>("emailaddress");
			}
			set
			{
				this.OnPropertyChanging("EmailAddress");
				this.SetAttributeValue("emailaddress", value);
				this.OnPropertyChanged("EmailAddress");
			}
		}
		
		/// <summary>
		/// Choose the entitlement that is applicable for the case.
		/// </summary>
		[AttributeLogicalNameAttribute("entitlementid")]
		public EntityReference Entitlement
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("entitlementid");
			}
			set
			{
				this.OnPropertyChanging("Entitlement");
				this.SetAttributeValue("entitlementid", value);
				this.OnPropertyChanged("Entitlement");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("entityimageid")]
		public Nullable<Guid> EntityImageId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("entityimageid");
			}
		}
		
		/// <summary>
		/// Indicates the date and time when the case was escalated.
		/// </summary>
		[AttributeLogicalNameAttribute("escalatedon")]
		public Nullable<DateTime> EscalatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("escalatedon");
			}
		}
		
		/// <summary>
		/// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangerate")]
		public Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Select an existing case for the customer that has been populated. For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("existingcase")]
		public EntityReference ExistingCase
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("existingcase");
			}
			set
			{
				this.OnPropertyChanging("ExistingCase");
				this.SetAttributeValue("existingcase", value);
				this.OnPropertyChanged("ExistingCase");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("firstresponsebykpiid")]
		public EntityReference FirstResponseByKPI
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("firstresponsebykpiid");
			}
			set
			{
				this.OnPropertyChanging("FirstResponseByKPI");
				this.SetAttributeValue("firstresponsebykpiid", value);
				this.OnPropertyChanged("FirstResponseByKPI");
			}
		}
		
		/// <summary>
		/// Indicates if the first response has been sent.
		/// </summary>
		[AttributeLogicalNameAttribute("firstresponsesent")]
		public Nullable<bool> FirstResponseSent
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("firstresponsesent");
			}
			set
			{
				this.OnPropertyChanging("FirstResponseSent");
				this.SetAttributeValue("firstresponsesent", value);
				this.OnPropertyChanged("FirstResponseSent");
			}
		}
		
		/// <summary>
		/// Shows the status of the initial response time for the case according to the terms of the SLA.
		/// </summary>
		[AttributeLogicalNameAttribute("firstresponseslastatus")]
		public Nullable<CaseFirstResponseSLAStatus> FirstResponseSLAStatus
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("firstresponseslastatus");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CaseFirstResponseSLAStatus)(Enum.ToObject(typeof(CaseFirstResponseSLAStatus), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("FirstResponseSLAStatus");
				if (value == null)
				{
					this.SetAttributeValue("firstresponseslastatus", null);
				}
				else
				{
					this.SetAttributeValue("firstresponseslastatus", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("FirstResponseSLAStatus");
			}
		}
		
		/// <summary>
		/// Enter the date by which a customer service representative has to follow up with the customer on this case.
		/// </summary>
		[AttributeLogicalNameAttribute("followupby")]
		public Nullable<DateTime> FollowUpBy
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("followupby");
			}
			set
			{
				this.OnPropertyChanging("FollowUpBy");
				this.SetAttributeValue("followupby", value);
				this.OnPropertyChanged("FollowUpBy");
			}
		}
		
		/// <summary>
		/// This attribute is used for Sample Service Business Processes.
		/// </summary>
		[AttributeLogicalNameAttribute("followuptaskcreated")]
		public Nullable<bool> FollowUpTaskCreated
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("followuptaskcreated");
			}
			set
			{
				this.OnPropertyChanging("FollowUpTaskCreated");
				this.SetAttributeValue("followuptaskcreated", value);
				this.OnPropertyChanged("FollowUpTaskCreated");
			}
		}
		
		/// <summary>
		/// Unique identifier of the case.
		/// </summary>
		[AttributeLogicalNameAttribute("incidentid")]
		public Nullable<Guid> CaseId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("incidentid");
			}
			set
			{
				this.OnPropertyChanging("CaseId");
				this.SetAttributeValue("incidentid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("CaseId");
			}
		}
		
		[AttributeLogicalNameAttribute("incidentid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.CaseId = value;
			}
		}
		
		/// <summary>
		/// Select the current stage of the service process for the case to assist service team members when they review or transfer a case.
		/// </summary>
		[AttributeLogicalNameAttribute("incidentstagecode")]
		public Nullable<CaseCaseStage> CaseStage
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("incidentstagecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CaseCaseStage)(Enum.ToObject(typeof(CaseCaseStage), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("CaseStage");
				if (value == null)
				{
					this.SetAttributeValue("incidentstagecode", null);
				}
				else
				{
					this.SetAttributeValue("incidentstagecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("CaseStage");
			}
		}
		
		/// <summary>
		/// Will contain the Influencer score coming from NetBreeze.
		/// </summary>
		[AttributeLogicalNameAttribute("influencescore")]
		public Nullable<double> InfluenceScore
		{
			get
			{
				return this.GetAttributeValue<Nullable<double>>("influencescore");
			}
			set
			{
				this.OnPropertyChanging("InfluenceScore");
				this.SetAttributeValue("influencescore", value);
				this.OnPropertyChanged("InfluenceScore");
			}
		}
		
		/// <summary>
		/// For system use only.
		/// </summary>
		[AttributeLogicalNameAttribute("isdecrementing")]
		public Nullable<bool> Decrementing
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isdecrementing");
			}
			set
			{
				this.OnPropertyChanging("Decrementing");
				this.SetAttributeValue("isdecrementing", value);
				this.OnPropertyChanged("Decrementing");
			}
		}
		
		/// <summary>
		/// Indicates if the case has been escalated.
		/// </summary>
		[AttributeLogicalNameAttribute("isescalated")]
		public Nullable<bool> IsEscalated
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isescalated");
			}
			set
			{
				this.OnPropertyChanging("IsEscalated");
				this.SetAttributeValue("isescalated", value);
				this.OnPropertyChanged("IsEscalated");
			}
		}
		
		/// <summary>
		/// Choose the article that contains additional information or a resolution for the case, for reference during research or follow up with the customer.
		/// </summary>
		[AttributeLogicalNameAttribute("kbarticleid")]
		public EntityReference KnowledgeBaseArticle
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("kbarticleid");
			}
			set
			{
				this.OnPropertyChanging("KnowledgeBaseArticle");
				this.SetAttributeValue("kbarticleid", value);
				this.OnPropertyChanged("KnowledgeBaseArticle");
			}
		}
		
		/// <summary>
		/// Shows the latest activity associated with the Case and the action performed on that activity.
		/// </summary>
		[AttributeLogicalNameAttribute("lastinteraction")]
		public string LastInteraction
		{
			get
			{
				return this.GetAttributeValue<string>("lastinteraction");
			}
		}
		
		/// <summary>
		/// Contains the date time stamp of the last on hold time.
		/// </summary>
		[AttributeLogicalNameAttribute("lastonholdtime")]
		public Nullable<DateTime> LastOnHoldTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("lastonholdtime");
			}
			set
			{
				this.OnPropertyChanging("LastOnHoldTime");
				this.SetAttributeValue("lastonholdtime", value);
				this.OnPropertyChanged("LastOnHoldTime");
			}
		}
		
		/// <summary>
		/// Choose the primary case the current case was merged into.
		/// </summary>
		[AttributeLogicalNameAttribute("masterid")]
		public EntityReference MasterCase
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("masterid");
			}
			set
			{
				this.OnPropertyChanging("MasterCase");
				this.SetAttributeValue("masterid", value);
				this.OnPropertyChanged("MasterCase");
			}
		}
		
		/// <summary>
		/// Tells whether the incident has been merged with another incident.
		/// </summary>
		[AttributeLogicalNameAttribute("merged")]
		public Nullable<bool> InternalUseOnly
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("merged");
			}
		}
		
		/// <summary>
		/// Shows whether the post originated as a public or private message.
		/// </summary>
		[AttributeLogicalNameAttribute("messagetypecode")]
		public Nullable<GlobalPostMessageType> ReceivedAs
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("messagetypecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalPostMessageType)(Enum.ToObject(typeof(GlobalPostMessageType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ReceivedAs");
				if (value == null)
				{
					this.SetAttributeValue("messagetypecode", null);
				}
				else
				{
					this.SetAttributeValue("messagetypecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ReceivedAs");
			}
		}
		
		/// <summary>
		/// Shows who last updated the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Shows the external party who modified the record.
		/// </summary>
		[AttributeLogicalNameAttribute("modifiedbyexternalparty")]
		public EntityReference ModifiedByExternalParty
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedbyexternalparty");
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Allows a partner contact to be assigned to a specific case.
		/// </summary>
		[AttributeLogicalNameAttribute("msa_partnercontactid")]
		public EntityReference PartnerContact
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("msa_partnercontactid");
			}
			set
			{
				this.OnPropertyChanging("PartnerContact");
				this.SetAttributeValue("msa_partnercontactid", value);
				this.OnPropertyChanged("PartnerContact");
			}
		}
		
		/// <summary>
		/// Creates a Relationship between a Partner (account) and a case for indirect service arrangements.
		/// </summary>
		[AttributeLogicalNameAttribute("msa_partnerid")]
		public EntityReference Partner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("msa_partnerid");
			}
			set
			{
				this.OnPropertyChanging("Partner");
				this.SetAttributeValue("msa_partnerid", value);
				this.OnPropertyChanged("Partner");
			}
		}
		
		/// <summary>
		/// The iot alert that initiated this case
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_iotalert")]
		public EntityReference IoTAlert
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("msdyn_iotalert");
			}
			set
			{
				this.OnPropertyChanging("IoTAlert");
				this.SetAttributeValue("msdyn_iotalert", value);
				this.OnPropertyChanged("IoTAlert");
			}
		}
		
		/// <summary>
		/// Shows the unresolved SLA KPI associated with the Case with the earliest expiry time.
		/// </summary>
		[AttributeLogicalNameAttribute("nextsla")]
		public string NextSla
		{
			get
			{
				return this.GetAttributeValue<string>("nextsla");
			}
			set
			{
				this.OnPropertyChanging("NextSla");
				this.SetAttributeValue("nextsla", value);
				this.OnPropertyChanged("NextSla");
			}
		}
		
		/// <summary>
		/// Number of child incidents associated with the incident.
		/// </summary>
		[AttributeLogicalNameAttribute("numberofchildincidents")]
		public Nullable<int> ChildCases
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("numberofchildincidents");
			}
		}
		
		/// <summary>
		/// Shows the duration in minutes for which the case was on hold.
		/// </summary>
		[AttributeLogicalNameAttribute("onholdtime")]
		public Nullable<int> OnHoldTimeMinutes
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("onholdtime");
			}
		}
		
		/// <summary>
		/// Owner Id
		/// </summary>
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				this.OnPropertyChanging("Owner");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record
		/// </summary>
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Choose the parent case for a case.
		/// </summary>
		[AttributeLogicalNameAttribute("parentcaseid")]
		public EntityReference ParentCase
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("parentcaseid");
			}
			set
			{
				this.OnPropertyChanging("ParentCase");
				this.SetAttributeValue("parentcaseid", value);
				this.OnPropertyChanged("ParentCase");
			}
		}
		
		/// <summary>
		/// Select a primary contact for this case.
		/// </summary>
		[AttributeLogicalNameAttribute("primarycontactid")]
		public EntityReference PrimaryContactId
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("primarycontactid");
			}
			set
			{
				this.OnPropertyChanging("PrimaryContactId");
				this.SetAttributeValue("primarycontactid", value);
				this.OnPropertyChanged("PrimaryContactId");
			}
		}
		
		/// <summary>
		/// Select the priority so that preferred customers or critical issues are handled quickly.
		/// </summary>
		[AttributeLogicalNameAttribute("prioritycode")]
		public Nullable<CasePriority> Priority
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("prioritycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CasePriority)(Enum.ToObject(typeof(CasePriority), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Priority");
				if (value == null)
				{
					this.SetAttributeValue("prioritycode", null);
				}
				else
				{
					this.SetAttributeValue("prioritycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// Contains the id of the process associated with the entity.
		/// </summary>
		[AttributeLogicalNameAttribute("processid")]
		public Nullable<Guid> ProcessId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("processid");
			}
			set
			{
				this.OnPropertyChanging("ProcessId");
				this.SetAttributeValue("processid", value);
				this.OnPropertyChanged("ProcessId");
			}
		}
		
		/// <summary>
		/// Choose the product associated with the case to identify warranty, service, or other product issues and be able to report the number of incidents for each product.
		/// </summary>
		[AttributeLogicalNameAttribute("productid")]
		public EntityReference Product
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("productid");
			}
			set
			{
				this.OnPropertyChanging("Product");
				this.SetAttributeValue("productid", value);
				this.OnPropertyChanged("Product");
			}
		}
		
		/// <summary>
		/// Type the serial number of the product that is associated with this case, so that the number of cases per product can be reported.
		/// </summary>
		[AttributeLogicalNameAttribute("productserialnumber")]
		public string SerialNumber
		{
			get
			{
				return this.GetAttributeValue<string>("productserialnumber");
			}
			set
			{
				this.OnPropertyChanging("SerialNumber");
				this.SetAttributeValue("productserialnumber", value);
				this.OnPropertyChanged("SerialNumber");
			}
		}
		
		/// <summary>
		/// Enter the date by when the case must be resolved.
		/// </summary>
		[AttributeLogicalNameAttribute("resolveby")]
		public Nullable<DateTime> ResolveBy
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("resolveby");
			}
			set
			{
				this.OnPropertyChanging("ResolveBy");
				this.SetAttributeValue("resolveby", value);
				this.OnPropertyChanged("ResolveBy");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("resolvebykpiid")]
		public EntityReference ResolveByKPI
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("resolvebykpiid");
			}
			set
			{
				this.OnPropertyChanging("ResolveByKPI");
				this.SetAttributeValue("resolvebykpiid", value);
				this.OnPropertyChanged("ResolveByKPI");
			}
		}
		
		/// <summary>
		/// Shows the status of the resolution time for the case according to the terms of the SLA.
		/// </summary>
		[AttributeLogicalNameAttribute("resolvebyslastatus")]
		public Nullable<CaseResolveBySLAStatus> ResolveBySLAStatus
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("resolvebyslastatus");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CaseResolveBySLAStatus)(Enum.ToObject(typeof(CaseResolveBySLAStatus), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ResolveBySLAStatus");
				if (value == null)
				{
					this.SetAttributeValue("resolvebyslastatus", null);
				}
				else
				{
					this.SetAttributeValue("resolvebyslastatus", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ResolveBySLAStatus");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("responseby")]
		public Nullable<DateTime> FirstResponseBy
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("responseby");
			}
			set
			{
				this.OnPropertyChanging("FirstResponseBy");
				this.SetAttributeValue("responseby", value);
				this.OnPropertyChanged("FirstResponseBy");
			}
		}
		
		/// <summary>
		/// Choose an additional customer contact who can also help resolve the case.
		/// </summary>
		[AttributeLogicalNameAttribute("responsiblecontactid")]
		[System.ObsoleteAttribute()]
		public EntityReference ResponsibleContact
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("responsiblecontactid");
			}
			set
			{
				this.OnPropertyChanging("ResponsibleContact");
				this.SetAttributeValue("responsiblecontactid", value);
				this.OnPropertyChanged("ResponsibleContact");
			}
		}
		
		/// <summary>
		/// Tells whether the incident has been routed to queue or not.
		/// </summary>
		[AttributeLogicalNameAttribute("routecase")]
		public Nullable<bool> RouteCase
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("routecase");
			}
			set
			{
				this.OnPropertyChanging("RouteCase");
				this.SetAttributeValue("routecase", value);
				this.OnPropertyChanged("RouteCase");
			}
		}
		
		/// <summary>
		/// Value derived after assessing words commonly associated with a negative, neutral, or positive sentiment that occurs in a social post. Sentiment information can also be reported as numeric values.
		/// </summary>
		[AttributeLogicalNameAttribute("sentimentvalue")]
		public Nullable<double> SentimentValue
		{
			get
			{
				return this.GetAttributeValue<Nullable<double>>("sentimentvalue");
			}
			set
			{
				this.OnPropertyChanging("SentimentValue");
				this.SetAttributeValue("sentimentvalue", value);
				this.OnPropertyChanged("SentimentValue");
			}
		}
		
		/// <summary>
		/// Select the stage, in the case resolution process, that the case is in.
		/// </summary>
		[AttributeLogicalNameAttribute("servicestage")]
		public Nullable<GlobalServiceStage> ServiceStage
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("servicestage");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalServiceStage)(Enum.ToObject(typeof(GlobalServiceStage), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("ServiceStage");
				if (value == null)
				{
					this.SetAttributeValue("servicestage", null);
				}
				else
				{
					this.SetAttributeValue("servicestage", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("ServiceStage");
			}
		}
		
		/// <summary>
		/// Select the severity of this case to indicate the incident's impact on the customer's business.
		/// </summary>
		[AttributeLogicalNameAttribute("severitycode")]
		public Nullable<CaseSeverity> Severity
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("severitycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (CaseSeverity)(Enum.ToObject(typeof(CaseSeverity), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Severity");
				if (value == null)
				{
					this.SetAttributeValue("severitycode", null);
				}
				else
				{
					this.SetAttributeValue("severitycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Severity");
			}
		}
		
		/// <summary>
		/// Choose the service level agreement (SLA) that you want to apply to the case record.
		/// </summary>
		[AttributeLogicalNameAttribute("slaid")]
		public EntityReference SLA
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slaid");
			}
			set
			{
				this.OnPropertyChanging("SLA");
				this.SetAttributeValue("slaid", value);
				this.OnPropertyChanged("SLA");
			}
		}
		
		/// <summary>
		/// Last SLA that was applied to this case. This field is for internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("slainvokedid")]
		public EntityReference LastSLAApplied
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slainvokedid");
			}
		}
		
		/// <summary>
		/// Unique identifier of the social profile with which the case is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("socialprofileid")]
		public EntityReference SocialProfile
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("socialprofileid");
			}
			set
			{
				this.OnPropertyChanging("SocialProfile");
				this.SetAttributeValue("socialprofileid", value);
				this.OnPropertyChanged("SocialProfile");
			}
		}
		
		/// <summary>
		/// Contains the id of the stage where the entity is located.
		/// </summary>
		[AttributeLogicalNameAttribute("stageid")]
		public Nullable<Guid> DeprecatedStageId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("stageid");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedStageId");
				this.SetAttributeValue("stageid", value);
				this.OnPropertyChanged("DeprecatedStageId");
			}
		}
		
		/// <summary>
		/// Shows whether the case is active, resolved, or canceled. Resolved and canceled cases are read-only and can't be edited unless they are reactivated.
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<CaseState> State
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((CaseState)(Enum.ToObject(typeof(CaseState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("State");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// Select the case's status.
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<CaseStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((CaseStatusReason)(Enum.ToObject(typeof(CaseStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		/// <summary>
		/// Choose the subject for the case, such as catalog request or product complaint, so customer service managers can identify frequent requests or problem areas. Administrators can configure subjects under Business Management in the Settings area.
		/// </summary>
		[AttributeLogicalNameAttribute("subjectid")]
		public EntityReference Subject
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("subjectid");
			}
			set
			{
				this.OnPropertyChanging("Subject");
				this.SetAttributeValue("subjectid", value);
				this.OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// Shows the case number for customer reference and searching capabilities. This cannot be modified.
		/// </summary>
		[AttributeLogicalNameAttribute("ticketnumber")]
		public string CaseNumber
		{
			get
			{
				return this.GetAttributeValue<string>("ticketnumber");
			}
			set
			{
				this.OnPropertyChanging("CaseNumber");
				this.SetAttributeValue("ticketnumber", value);
				this.OnPropertyChanged("CaseNumber");
			}
		}
		
		/// <summary>
		/// Type a subject or descriptive name, such as the request, issue, or company name, to identify the case in Microsoft Dynamics 365 views.
		/// </summary>
		[AttributeLogicalNameAttribute("title")]
		public string CaseTitle
		{
			get
			{
				return this.GetAttributeValue<string>("title");
			}
			set
			{
				this.OnPropertyChanging("CaseTitle");
				this.SetAttributeValue("title", value);
				this.OnPropertyChanged("CaseTitle");
			}
		}
		
		/// <summary>
		/// Choose the local currency for the record to make sure budgets are reported in the correct currency.
		/// </summary>
		[AttributeLogicalNameAttribute("transactioncurrencyid")]
		public EntityReference Currency
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.OnPropertyChanging("Currency");
				this.SetAttributeValue("transactioncurrencyid", value);
				this.OnPropertyChanged("Currency");
			}
		}
		
		/// <summary>
		/// A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.
		/// </summary>
		[AttributeLogicalNameAttribute("traversedpath")]
		public string DeprecatedTraversedPath
		{
			get
			{
				return this.GetAttributeValue<string>("traversedpath");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedTraversedPath");
				this.SetAttributeValue("traversedpath", value);
				this.OnPropertyChanged("DeprecatedTraversedPath");
			}
		}
		
		public struct Fields
		{
			
			public static string Account = "accountid";
			
			public static string ActivitiesComplete = "activitiescomplete";
			
			public static string ActualServiceUnits = "actualserviceunits";
			
			public static string CreatedByIPAddress = "adx_createdbyipaddress";
			
			public static string CreatedByUsername = "adx_createdbyusername";
			
			public static string ModifiedByIPAddress = "adx_modifiedbyipaddress";
			
			public static string ModifiedByUsername = "adx_modifiedbyusername";
			
			public static string PublishToWeb = "adx_publishtoweb";
			
			public static string Resolution = "adx_resolution";
			
			public static string ResolutionDate = "adx_resolutiondate";
			
			public static string StepsToReproduce = "adx_stepstoreproduce";
			
			public static string BilledServiceUnits = "billedserviceunits";
			
			public static string BlockedProfile = "blockedprofile";
			
			public static string CaseAge = "caseage";
			
			public static string Origin = "caseorigincode";
			
			public static string CaseType = "casetypecode";
			
			public static string CheckEmail = "checkemail";
			
			public static string Contact = "contactid";
			
			public static string ContractLine = "contractdetailid";
			
			public static string Contract = "contractid";
			
			public static string ServiceLevel = "contractservicelevelcode";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedByExternalParty = "createdbyexternalparty";
			
			public static string CreatedOn = "createdon";
			
			public static string CustomerContacted = "customercontacted";
			
			public static string Customer = "customerid";
			
			public static string Satisfaction = "customersatisfactioncode";
			
			public static string DeactivatedOn = "deactivatedon";
			
			public static string DecrementEntitlementTerms = "decremententitlementterm";
			
			public static string Description = "description";
			
			public static string EmailAddress = "emailaddress";
			
			public static string Entitlement = "entitlementid";
			
			public static string EntityImageId = "entityimageid";
			
			public static string EscalatedOn = "escalatedon";
			
			public static string ExchangeRate = "exchangerate";
			
			public static string ExistingCase = "existingcase";
			
			public static string FirstResponseByKPI = "firstresponsebykpiid";
			
			public static string FirstResponseSent = "firstresponsesent";
			
			public static string FirstResponseSLAStatus = "firstresponseslastatus";
			
			public static string FollowUpBy = "followupby";
			
			public static string FollowUpTaskCreated = "followuptaskcreated";
			
			public static string CaseId = "incidentid";
			
			public static string Id = "incidentid";
			
			public static string CaseStage = "incidentstagecode";
			
			public static string InfluenceScore = "influencescore";
			
			public static string Decrementing = "isdecrementing";
			
			public static string IsEscalated = "isescalated";
			
			public static string KnowledgeBaseArticle = "kbarticleid";
			
			public static string LastInteraction = "lastinteraction";
			
			public static string LastOnHoldTime = "lastonholdtime";
			
			public static string MasterCase = "masterid";
			
			public static string InternalUseOnly = "merged";
			
			public static string ReceivedAs = "messagetypecode";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedByExternalParty = "modifiedbyexternalparty";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string PartnerContact = "msa_partnercontactid";
			
			public static string Partner = "msa_partnerid";
			
			public static string IoTAlert = "msdyn_iotalert";
			
			public static string NextSla = "nextsla";
			
			public static string ChildCases = "numberofchildincidents";
			
			public static string OnHoldTimeMinutes = "onholdtime";
			
			public static string Owner = "ownerid";
			
			public static string OwningBusinessUnit = "owningbusinessunit";
			
			public static string OwningTeam = "owningteam";
			
			public static string OwningUser = "owninguser";
			
			public static string ParentCase = "parentcaseid";
			
			public static string PrimaryContactId = "primarycontactid";
			
			public static string Priority = "prioritycode";
			
			public static string ProcessId = "processid";
			
			public static string Product = "productid";
			
			public static string SerialNumber = "productserialnumber";
			
			public static string ResolveBy = "resolveby";
			
			public static string ResolveByKPI = "resolvebykpiid";
			
			public static string ResolveBySLAStatus = "resolvebyslastatus";
			
			public static string FirstResponseBy = "responseby";
			
			public static string ResponsibleContact = "responsiblecontactid";
			
			public static string RouteCase = "routecase";
			
			public static string SentimentValue = "sentimentvalue";
			
			public static string ServiceStage = "servicestage";
			
			public static string Severity = "severitycode";
			
			public static string SLA = "slaid";
			
			public static string LastSLAApplied = "slainvokedid";
			
			public static string SocialProfile = "socialprofileid";
			
			public static string DeprecatedStageId = "stageid";
			
			public static string State = "statecode";
			
			public static string StatusReason = "statuscode";
			
			public static string Subject = "subjectid";
			
			public static string CaseNumber = "ticketnumber";
			
			public static string CaseTitle = "title";
			
			public static string Currency = "transactioncurrencyid";
			
			public static string DeprecatedTraversedPath = "traversedpath";
		}
	}
}
