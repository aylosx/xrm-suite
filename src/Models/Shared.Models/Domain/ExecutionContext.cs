//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// 
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("aylos_executioncontext")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.95")]
	public partial class ExecutionContext : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public ExecutionContext() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "aylos_executioncontext";
		
		public const string EntityLogicalCollectionName = "aylos_executioncontexts";
		
		public const string EntitySetName = "aylos_executioncontexts";
		
		public const int EntityTypeCode = 10531;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Maintains a value that denotes if a Parent Context exists.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_containsparentcontext")]
		public Nullable<bool> ContainsParentContext
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("aylos_containsparentcontext");
			}
			set
			{
				this.OnPropertyChanging("ContainsParentContext");
				this.SetAttributeValue("aylos_containsparentcontext", value);
				this.OnPropertyChanged("ContainsParentContext");
			}
		}
		
		/// <summary>
		/// Holds the JSON serialised version of the execution context. The maximum length is set to the service bus maximum message size.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_content")]
		public string Content
		{
			get
			{
				return this.GetAttributeValue<string>("aylos_content");
			}
			set
			{
				this.OnPropertyChanging("Content");
				this.SetAttributeValue("aylos_content", value);
				this.OnPropertyChanged("Content");
			}
		}
		
		/// <summary>
		/// Maintains the number of characters of the content.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_contentlength")]
		public Nullable<int> ContentLength
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("aylos_contentlength");
			}
			set
			{
				this.OnPropertyChanging("ContentLength");
				this.SetAttributeValue("aylos_contentlength", value);
				this.OnPropertyChanged("ContentLength");
			}
		}
		
		/// <summary>
		/// Maintains the execution pipeline's correlation identifier.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_correlationid")]
		public string CorrelationId
		{
			get
			{
				return this.GetAttributeValue<string>("aylos_correlationid");
			}
			set
			{
				this.OnPropertyChanging("CorrelationId");
				this.SetAttributeValue("aylos_correlationid", value);
				this.OnPropertyChanged("CorrelationId");
			}
		}
		
		/// <summary>
		/// Maintains the depth (level) of the pipeline's execution.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_depth")]
		public Nullable<int> Depth
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("aylos_depth");
			}
			set
			{
				this.OnPropertyChanging("Depth");
				this.SetAttributeValue("aylos_depth", value);
				this.OnPropertyChanged("Depth");
			}
		}
		
		/// <summary>
		/// Maintains the primary key of the primary entity,
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_entityid")]
		public string EntityId
		{
			get
			{
				return this.GetAttributeValue<string>("aylos_entityid");
			}
			set
			{
				this.OnPropertyChanging("EntityId");
				this.SetAttributeValue("aylos_entityid", value);
				this.OnPropertyChanged("EntityId");
			}
		}
		
		/// <summary>
		/// Maintains the entity name.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_entityname")]
		public string EntityName
		{
			get
			{
				return this.GetAttributeValue<string>("aylos_entityname");
			}
			set
			{
				this.OnPropertyChanging("EntityName");
				this.SetAttributeValue("aylos_entityname", value);
				this.OnPropertyChanged("EntityName");
			}
		}
		
		/// <summary>
		/// Unique identifier for entity instances
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_executioncontextid")]
		public Nullable<Guid> ExecutionContextId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("aylos_executioncontextid");
			}
			set
			{
				this.OnPropertyChanging("ExecutionContextId");
				this.SetAttributeValue("aylos_executioncontextid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("ExecutionContextId");
			}
		}
		
		[AttributeLogicalNameAttribute("aylos_executioncontextid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.ExecutionContextId = value;
			}
		}
		
		/// <summary>
		/// Maintains a reference to the user that initiated the action.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_initiatinguserid")]
		public EntityReference InitiatingUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("aylos_initiatinguserid");
			}
			set
			{
				this.OnPropertyChanging("InitiatingUser");
				this.SetAttributeValue("aylos_initiatinguserid", value);
				this.OnPropertyChanged("InitiatingUser");
			}
		}
		
		/// <summary>
		/// Maintains the message name.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_messagename")]
		public string MessageName
		{
			get
			{
				return this.GetAttributeValue<string>("aylos_messagename");
			}
			set
			{
				this.OnPropertyChanging("MessageName");
				this.SetAttributeValue("aylos_messagename", value);
				this.OnPropertyChanged("MessageName");
			}
		}
		
		/// <summary>
		/// Maintains the execution pipeline's operation identifier.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_operationid")]
		public string OperationId
		{
			get
			{
				return this.GetAttributeValue<string>("aylos_operationid");
			}
			set
			{
				this.OnPropertyChanging("OperationId");
				this.SetAttributeValue("aylos_operationid", value);
				this.OnPropertyChanged("OperationId");
			}
		}
		
		/// <summary>
		/// Maintains a value that denotes if the parent stage is a main operation.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_parentismainoperation")]
		public Nullable<bool> ParentIsMainOperation
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("aylos_parentismainoperation");
			}
			set
			{
				this.OnPropertyChanging("ParentIsMainOperation");
				this.SetAttributeValue("aylos_parentismainoperation", value);
				this.OnPropertyChanged("ParentIsMainOperation");
			}
		}
		
		/// <summary>
		/// Maintains the execution pipeline stage.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_stage")]
		public Nullable<int> Stage
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("aylos_stage");
			}
			set
			{
				this.OnPropertyChanging("Stage");
				this.SetAttributeValue("aylos_stage", value);
				this.OnPropertyChanged("Stage");
			}
		}
		
		/// <summary>
		/// The subject of the execution context be formed by the primary entity name, the primary entity id, the message name and current timestamp formatted.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_subject")]
		public string Subject
		{
			get
			{
				return this.GetAttributeValue<string>("aylos_subject");
			}
			set
			{
				this.OnPropertyChanging("Subject");
				this.SetAttributeValue("aylos_subject", value);
				this.OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// Maintains a reference to the user that the pipeline's execution runs within.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_userid")]
		public EntityReference User
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("aylos_userid");
			}
			set
			{
				this.OnPropertyChanging("User");
				this.SetAttributeValue("aylos_userid", value);
				this.OnPropertyChanged("User");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who modified the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Owner Id
		/// </summary>
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				this.OnPropertyChanging("Owner");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record
		/// </summary>
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Status of the Execution Context
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<ExecutionContextState> State
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((ExecutionContextState)(Enum.ToObject(typeof(ExecutionContextState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("State");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// Reason for the status of the Execution Context
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<ExecutionContextStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((ExecutionContextStatusReason)(Enum.ToObject(typeof(ExecutionContextStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		public struct Fields
		{
			
			public static string ContainsParentContext = "aylos_containsparentcontext";
			
			public static string Content = "aylos_content";
			
			public static string ContentLength = "aylos_contentlength";
			
			public static string CorrelationId = "aylos_correlationid";
			
			public static string Depth = "aylos_depth";
			
			public static string EntityId = "aylos_entityid";
			
			public static string EntityName = "aylos_entityname";
			
			public static string ExecutionContextId = "aylos_executioncontextid";
			
			public static string Id = "aylos_executioncontextid";
			
			public static string InitiatingUser = "aylos_initiatinguserid";
			
			public static string MessageName = "aylos_messagename";
			
			public static string OperationId = "aylos_operationid";
			
			public static string ParentIsMainOperation = "aylos_parentismainoperation";
			
			public static string Stage = "aylos_stage";
			
			public static string Subject = "aylos_subject";
			
			public static string User = "aylos_userid";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string Owner = "ownerid";
			
			public static string OwningBusinessUnit = "owningbusinessunit";
			
			public static string OwningTeam = "owningteam";
			
			public static string OwningUser = "owninguser";
			
			public static string State = "statecode";
			
			public static string StatusReason = "statuscode";
		}
	}
}
