//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Task performed, or to be performed, by a user. An activity is any action for which an entry can be made on a calendar.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("activitypointer")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.91")]
	public partial class Activity : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Activity() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "activitypointer";
		
		public const string EntityLogicalCollectionName = "activitypointers";
		
		public const string EntitySetName = "activitypointers";
		
		public const int EntityTypeCode = 4200;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Additional information provided by the external application as JSON. For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("activityadditionalparams")]
		public string ActivityAdditionalParameters
		{
			get
			{
				return this.GetAttributeValue<string>("activityadditionalparams");
			}
			set
			{
				this.OnPropertyChanging("ActivityAdditionalParameters");
				this.SetAttributeValue("activityadditionalparams", value);
				this.OnPropertyChanged("ActivityAdditionalParameters");
			}
		}
		
		/// <summary>
		/// Unique identifier of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("activityid")]
		public Nullable<Guid> ActivityId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("activityid");
			}
			set
			{
				this.OnPropertyChanging("ActivityId");
				this.SetAttributeValue("activityid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("ActivityId");
			}
		}
		
		[AttributeLogicalNameAttribute("activityid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.ActivityId = value;
			}
		}
		
		/// <summary>
		/// Type of activity.
		/// </summary>
		[AttributeLogicalNameAttribute("activitytypecode")]
		public string ActivityType
		{
			get
			{
				return this.GetAttributeValue<string>("activitytypecode");
			}
		}
		
		/// <summary>
		/// Actual duration of the activity in minutes.
		/// </summary>
		[AttributeLogicalNameAttribute("actualdurationminutes")]
		public Nullable<int> ActualDuration
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("actualdurationminutes");
			}
			set
			{
				this.OnPropertyChanging("ActualDuration");
				this.SetAttributeValue("actualdurationminutes", value);
				this.OnPropertyChanged("ActualDuration");
			}
		}
		
		/// <summary>
		/// Actual end time of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("actualend")]
		public Nullable<DateTime> ActualEnd
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("actualend");
			}
			set
			{
				this.OnPropertyChanging("ActualEnd");
				this.SetAttributeValue("actualend", value);
				this.OnPropertyChanged("ActualEnd");
			}
		}
		
		/// <summary>
		/// Actual start time of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("actualstart")]
		public Nullable<DateTime> ActualStart
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("actualstart");
			}
			set
			{
				this.OnPropertyChanging("ActualStart");
				this.SetAttributeValue("actualstart", value);
				this.OnPropertyChanged("ActualStart");
			}
		}
		
		/// <summary>
		/// All activity parties associated with this activity.
		/// </summary>
		[AttributeLogicalNameAttribute("allparties")]
		public IEnumerable<ActivityParty> AllActivityParties
		{
			get
			{
				EntityCollection collection = this.GetAttributeValue<EntityCollection>("allparties");
				if (((collection != null) 
							&& (collection.Entities != null)))
				{
					return Enumerable.Cast<ActivityParty>(collection.Entities);
				}
				else
				{
					return null;
				}
			}
		}
		
		/// <summary>
		/// Shows how contact about the social activity originated, such as from Twitter or Facebook. This field is read-only.
		/// </summary>
		[AttributeLogicalNameAttribute("community")]
		public Nullable<GlobalSocialChannel> SocialChannel
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("community");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalSocialChannel)(Enum.ToObject(typeof(GlobalSocialChannel), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("SocialChannel");
				if (value == null)
				{
					this.SetAttributeValue("community", null);
				}
				else
				{
					this.SetAttributeValue("community", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("SocialChannel");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user who created the activity.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the activity was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> DateCreated
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("DateCreated");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("DateCreated");
			}
		}
		
		/// <summary>
		/// Date and time when the delivery of the activity was last attempted.
		/// </summary>
		[AttributeLogicalNameAttribute("deliverylastattemptedon")]
		public Nullable<DateTime> DateDeliveryLastAttempted
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("deliverylastattemptedon");
			}
		}
		
		/// <summary>
		/// Priority of delivery of the activity to the email server.
		/// </summary>
		[AttributeLogicalNameAttribute("deliveryprioritycode")]
		public Nullable<GlobalDeliveryPriority> DeliveryPriority
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("deliveryprioritycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalDeliveryPriority)(Enum.ToObject(typeof(GlobalDeliveryPriority), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("DeliveryPriority");
				if (value == null)
				{
					this.SetAttributeValue("deliveryprioritycode", null);
				}
				else
				{
					this.SetAttributeValue("deliveryprioritycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("DeliveryPriority");
			}
		}
		
		/// <summary>
		/// Description of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// The message id of activity which is returned from Exchange Server.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangeitemid")]
		public string ExchangeItemID
		{
			get
			{
				return this.GetAttributeValue<string>("exchangeitemid");
			}
			set
			{
				this.OnPropertyChanging("ExchangeItemID");
				this.SetAttributeValue("exchangeitemid", value);
				this.OnPropertyChanged("ExchangeItemID");
			}
		}
		
		/// <summary>
		/// Exchange rate for the currency associated with the activitypointer with respect to the base currency.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangerate")]
		public Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Shows the web link of Activity of type email.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangeweblink")]
		public string ExchangeWebLink
		{
			get
			{
				return this.GetAttributeValue<string>("exchangeweblink");
			}
			set
			{
				this.OnPropertyChanging("ExchangeWebLink");
				this.SetAttributeValue("exchangeweblink", value);
				this.OnPropertyChanged("ExchangeWebLink");
			}
		}
		
		/// <summary>
		/// Type of instance of a recurring series.
		/// </summary>
		[AttributeLogicalNameAttribute("instancetypecode")]
		public Nullable<ActivityAppointmentType> RecurringInstanceType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("instancetypecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ActivityAppointmentType)(Enum.ToObject(typeof(ActivityAppointmentType), optionSet.Value));
				}
			}
		}
		
		/// <summary>
		/// Information regarding whether the activity was billed as part of resolving a case.
		/// </summary>
		[AttributeLogicalNameAttribute("isbilled")]
		public Nullable<bool> IsBilled
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isbilled");
			}
			set
			{
				this.OnPropertyChanging("IsBilled");
				this.SetAttributeValue("isbilled", value);
				this.OnPropertyChanged("IsBilled");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("ismapiprivate")]
		public Nullable<bool> IsPrivate
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("ismapiprivate");
			}
			set
			{
				this.OnPropertyChanging("IsPrivate");
				this.SetAttributeValue("ismapiprivate", value);
				this.OnPropertyChanged("IsPrivate");
			}
		}
		
		/// <summary>
		/// Information regarding whether the activity is a regular activity type or event type.
		/// </summary>
		[AttributeLogicalNameAttribute("isregularactivity")]
		public Nullable<bool> IsRegularActivity
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isregularactivity");
			}
		}
		
		/// <summary>
		/// Information regarding whether the activity was created from a workflow rule.
		/// </summary>
		[AttributeLogicalNameAttribute("isworkflowcreated")]
		public Nullable<bool> IsWorkflowCreated
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("isworkflowcreated");
			}
			set
			{
				this.OnPropertyChanging("IsWorkflowCreated");
				this.SetAttributeValue("isworkflowcreated", value);
				this.OnPropertyChanged("IsWorkflowCreated");
			}
		}
		
		/// <summary>
		/// Contains the date and time stamp of the last on hold time.
		/// </summary>
		[AttributeLogicalNameAttribute("lastonholdtime")]
		public Nullable<DateTime> LastOnHoldTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("lastonholdtime");
			}
			set
			{
				this.OnPropertyChanging("LastOnHoldTime");
				this.SetAttributeValue("lastonholdtime", value);
				this.OnPropertyChanged("LastOnHoldTime");
			}
		}
		
		/// <summary>
		/// Left the voice mail
		/// </summary>
		[AttributeLogicalNameAttribute("leftvoicemail")]
		public Nullable<bool> LeftVoiceMail
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("leftvoicemail");
			}
			set
			{
				this.OnPropertyChanging("LeftVoiceMail");
				this.SetAttributeValue("leftvoicemail", value);
				this.OnPropertyChanged("LeftVoiceMail");
			}
		}
		
		/// <summary>
		/// Unique identifier of user who last modified the activity.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when activity was last modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> LastUpdated
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("LastUpdated");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("LastUpdated");
			}
		}
		
		/// <summary>
		/// Shows how long, in minutes, that the record was on hold.
		/// </summary>
		[AttributeLogicalNameAttribute("onholdtime")]
		public Nullable<int> OnHoldTimeMinutes
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("onholdtime");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user or team who owns the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				this.OnPropertyChanging("Owner");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// Unique identifier of the business unit that owns the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier of the team that owns the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier of the user that owns the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("postponeactivityprocessinguntil")]
		public Nullable<DateTime> DelayActivityProcessingUntil
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("postponeactivityprocessinguntil");
			}
		}
		
		/// <summary>
		/// Priority of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("prioritycode")]
		public Nullable<ActivityPriority> Priority
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("prioritycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (ActivityPriority)(Enum.ToObject(typeof(ActivityPriority), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Priority");
				if (value == null)
				{
					this.SetAttributeValue("prioritycode", null);
				}
				else
				{
					this.SetAttributeValue("prioritycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// Unique identifier of the Process.
		/// </summary>
		[AttributeLogicalNameAttribute("processid")]
		public Nullable<Guid> Process
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("processid");
			}
			set
			{
				this.OnPropertyChanging("Process");
				this.SetAttributeValue("processid", value);
				this.OnPropertyChanged("Process");
			}
		}
		
		/// <summary>
		/// Unique identifier of the object with which the activity is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("regardingobjectid")]
		public EntityReference Regarding
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("regardingobjectid");
			}
			set
			{
				this.OnPropertyChanging("Regarding");
				this.SetAttributeValue("regardingobjectid", value);
				this.OnPropertyChanged("Regarding");
			}
		}
		
		/// <summary>
		/// Scheduled duration of the activity, specified in minutes.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduleddurationminutes")]
		public Nullable<int> ScheduledDuration
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("scheduleddurationminutes");
			}
			set
			{
				this.OnPropertyChanging("ScheduledDuration");
				this.SetAttributeValue("scheduleddurationminutes", value);
				this.OnPropertyChanged("ScheduledDuration");
			}
		}
		
		/// <summary>
		/// Scheduled end time of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduledend")]
		public Nullable<DateTime> DueDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("scheduledend");
			}
			set
			{
				this.OnPropertyChanging("DueDate");
				this.SetAttributeValue("scheduledend", value);
				this.OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// Scheduled start time of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("scheduledstart")]
		public Nullable<DateTime> StartDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("scheduledstart");
			}
			set
			{
				this.OnPropertyChanging("StartDate");
				this.SetAttributeValue("scheduledstart", value);
				this.OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// Unique identifier of the mailbox associated with the sender of the email message.
		/// </summary>
		[AttributeLogicalNameAttribute("sendermailboxid")]
		public EntityReference SenderSMailbox
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("sendermailboxid");
			}
		}
		
		/// <summary>
		/// Date and time when the activity was sent.
		/// </summary>
		[AttributeLogicalNameAttribute("senton")]
		public Nullable<DateTime> DateSent
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("senton");
			}
		}
		
		/// <summary>
		/// Uniqueidentifier specifying the id of recurring series of an instance.
		/// </summary>
		[AttributeLogicalNameAttribute("seriesid")]
		public Nullable<Guid> SeriesId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("seriesid");
			}
		}
		
		/// <summary>
		/// Unique identifier of an associated service.
		/// </summary>
		[AttributeLogicalNameAttribute("serviceid")]
		public EntityReference Service
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("serviceid");
			}
			set
			{
				this.OnPropertyChanging("Service");
				this.SetAttributeValue("serviceid", value);
				this.OnPropertyChanged("Service");
			}
		}
		
		/// <summary>
		/// Choose the service level agreement (SLA) that you want to apply to the case record.
		/// </summary>
		[AttributeLogicalNameAttribute("slaid")]
		public EntityReference SLA
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slaid");
			}
			set
			{
				this.OnPropertyChanging("SLA");
				this.SetAttributeValue("slaid", value);
				this.OnPropertyChanged("SLA");
			}
		}
		
		/// <summary>
		/// Last SLA that was applied to this case. This field is for internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("slainvokedid")]
		public EntityReference LastSLAApplied
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slainvokedid");
			}
		}
		
		/// <summary>
		/// Shows the date and time by which the activities are sorted.
		/// </summary>
		[AttributeLogicalNameAttribute("sortdate")]
		public Nullable<DateTime> SortDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("sortdate");
			}
			set
			{
				this.OnPropertyChanging("SortDate");
				this.SetAttributeValue("sortdate", value);
				this.OnPropertyChanged("SortDate");
			}
		}
		
		/// <summary>
		/// Unique identifier of the Stage.
		/// </summary>
		[AttributeLogicalNameAttribute("stageid")]
		public Nullable<Guid> DeprecatedProcessStage
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("stageid");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedProcessStage");
				this.SetAttributeValue("stageid", value);
				this.OnPropertyChanged("DeprecatedProcessStage");
			}
		}
		
		/// <summary>
		/// Status of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<ActivityState> State
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((ActivityState)(Enum.ToObject(typeof(ActivityState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("State");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// Reason for the status of the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<ActivityStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((ActivityStatusReason)(Enum.ToObject(typeof(ActivityStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		/// <summary>
		/// Subject associated with the activity.
		/// </summary>
		[AttributeLogicalNameAttribute("subject")]
		public string Subject
		{
			get
			{
				return this.GetAttributeValue<string>("subject");
			}
			set
			{
				this.OnPropertyChanging("Subject");
				this.SetAttributeValue("subject", value);
				this.OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// Unique identifier of the currency associated with the activitypointer.
		/// </summary>
		[AttributeLogicalNameAttribute("transactioncurrencyid")]
		public EntityReference Currency
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.OnPropertyChanging("Currency");
				this.SetAttributeValue("transactioncurrencyid", value);
				this.OnPropertyChanged("Currency");
			}
		}
		
		/// <summary>
		/// For internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("traversedpath")]
		public string DeprecatedTraversedPath
		{
			get
			{
				return this.GetAttributeValue<string>("traversedpath");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedTraversedPath");
				this.SetAttributeValue("traversedpath", value);
				this.OnPropertyChanged("DeprecatedTraversedPath");
			}
		}
		
		public struct Fields
		{
			
			public static string ActivityAdditionalParameters = "activityadditionalparams";
			
			public static string ActivityId = "activityid";
			
			public static string Id = "activityid";
			
			public static string ActivityType = "activitytypecode";
			
			public static string ActualDuration = "actualdurationminutes";
			
			public static string ActualEnd = "actualend";
			
			public static string ActualStart = "actualstart";
			
			public static string AllActivityParties = "allparties";
			
			public static string SocialChannel = "community";
			
			public static string CreatedBy = "createdby";
			
			public static string DateCreated = "createdon";
			
			public static string DateDeliveryLastAttempted = "deliverylastattemptedon";
			
			public static string DeliveryPriority = "deliveryprioritycode";
			
			public static string Description = "description";
			
			public static string ExchangeItemID = "exchangeitemid";
			
			public static string ExchangeRate = "exchangerate";
			
			public static string ExchangeWebLink = "exchangeweblink";
			
			public static string RecurringInstanceType = "instancetypecode";
			
			public static string IsBilled = "isbilled";
			
			public static string IsPrivate = "ismapiprivate";
			
			public static string IsRegularActivity = "isregularactivity";
			
			public static string IsWorkflowCreated = "isworkflowcreated";
			
			public static string LastOnHoldTime = "lastonholdtime";
			
			public static string LeftVoiceMail = "leftvoicemail";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string LastUpdated = "modifiedon";
			
			public static string OnHoldTimeMinutes = "onholdtime";
			
			public static string Owner = "ownerid";
			
			public static string OwningBusinessUnit = "owningbusinessunit";
			
			public static string OwningTeam = "owningteam";
			
			public static string OwningUser = "owninguser";
			
			public static string DelayActivityProcessingUntil = "postponeactivityprocessinguntil";
			
			public static string Priority = "prioritycode";
			
			public static string Process = "processid";
			
			public static string Regarding = "regardingobjectid";
			
			public static string ScheduledDuration = "scheduleddurationminutes";
			
			public static string DueDate = "scheduledend";
			
			public static string StartDate = "scheduledstart";
			
			public static string SenderSMailbox = "sendermailboxid";
			
			public static string DateSent = "senton";
			
			public static string SeriesId = "seriesid";
			
			public static string Service = "serviceid";
			
			public static string SLA = "slaid";
			
			public static string LastSLAApplied = "slainvokedid";
			
			public static string SortDate = "sortdate";
			
			public static string DeprecatedProcessStage = "stageid";
			
			public static string State = "statecode";
			
			public static string StatusReason = "statuscode";
			
			public static string Subject = "subject";
			
			public static string Currency = "transactioncurrencyid";
			
			public static string DeprecatedTraversedPath = "traversedpath";
		}
	}
}
