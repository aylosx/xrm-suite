//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Shared.Models.Domain
{
	using Microsoft.Xrm.Sdk;
	using Microsoft.Xrm.Sdk.Client;
	using System;
	using System.CodeDom.Compiler;
	using System.Collections.Generic;
	using System.ComponentModel;
	using System.Linq;
	using System.Runtime.Serialization;
	
	
	/// <summary>
	/// Prospect or potential sales opportunity. Leads are converted into accounts, contacts, or opportunities when they are qualified. Otherwise, they are deleted or archived.
	/// </summary>
	[DataContractAttribute()]
	[EntityLogicalNameAttribute("lead")]
	[GeneratedCodeAttribute("CrmSvcUtil", "9.1.0.95")]
	public partial class Lead : Entity, INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		/// <summary>
		/// Default Constructor.
		/// </summary>
		public Lead() : 
				base(EntityLogicalName)
		{
		}
		
		public const string EntityLogicalName = "lead";
		
		public const string EntityLogicalCollectionName = "leads";
		
		public const string EntitySetName = "leads";
		
		public const int EntityTypeCode = 4;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		private void OnPropertyChanged(string propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void OnPropertyChanging(string propertyName)
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, new PropertyChangingEventArgs(propertyName));
			}
		}
		
		/// <summary>
		/// Unique identifier of the account with which the lead is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("accountid")]
		public EntityReference Account
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("accountid");
			}
		}
		
		/// <summary>
		/// Unique identifier for address 1.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_addressid")]
		public Nullable<Guid> AddressOneAddressId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("address1_addressid");
			}
			set
			{
				this.OnPropertyChanging("AddressOneAddressId");
				this.SetAttributeValue("address1_addressid", value);
				this.OnPropertyChanged("AddressOneAddressId");
			}
		}
		
		/// <summary>
		/// Select the primary address type.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_addresstypecode")]
		public Nullable<LeadAddressOneAddressType> AddressOneAddressType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("address1_addresstypecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadAddressOneAddressType)(Enum.ToObject(typeof(LeadAddressOneAddressType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("AddressOneAddressType");
				if (value == null)
				{
					this.SetAttributeValue("address1_addresstypecode", null);
				}
				else
				{
					this.SetAttributeValue("address1_addresstypecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("AddressOneAddressType");
			}
		}
		
		/// <summary>
		/// Type the city for the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_city")]
		public string City
		{
			get
			{
				return this.GetAttributeValue<string>("address1_city");
			}
			set
			{
				this.OnPropertyChanging("City");
				this.SetAttributeValue("address1_city", value);
				this.OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// Shows the complete primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_composite")]
		public string AddressOne
		{
			get
			{
				return this.GetAttributeValue<string>("address1_composite");
			}
		}
		
		/// <summary>
		/// Type the country or region for the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_country")]
		public string CountryRegion
		{
			get
			{
				return this.GetAttributeValue<string>("address1_country");
			}
			set
			{
				this.OnPropertyChanging("CountryRegion");
				this.SetAttributeValue("address1_country", value);
				this.OnPropertyChanged("CountryRegion");
			}
		}
		
		/// <summary>
		/// Type the county for the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_county")]
		public string AddressOneCounty
		{
			get
			{
				return this.GetAttributeValue<string>("address1_county");
			}
			set
			{
				this.OnPropertyChanging("AddressOneCounty");
				this.SetAttributeValue("address1_county", value);
				this.OnPropertyChanged("AddressOneCounty");
			}
		}
		
		/// <summary>
		/// Type the fax number associated with the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_fax")]
		public string AddressOneFax
		{
			get
			{
				return this.GetAttributeValue<string>("address1_fax");
			}
			set
			{
				this.OnPropertyChanging("AddressOneFax");
				this.SetAttributeValue("address1_fax", value);
				this.OnPropertyChanged("AddressOneFax");
			}
		}
		
		/// <summary>
		/// Type the latitude value for the primary address for use in mapping and other applications.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_latitude")]
		public Nullable<double> AddressOneLatitude
		{
			get
			{
				return this.GetAttributeValue<Nullable<double>>("address1_latitude");
			}
			set
			{
				this.OnPropertyChanging("AddressOneLatitude");
				this.SetAttributeValue("address1_latitude", value);
				this.OnPropertyChanged("AddressOneLatitude");
			}
		}
		
		/// <summary>
		/// Type the first line of the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_line1")]
		public string StreetOne
		{
			get
			{
				return this.GetAttributeValue<string>("address1_line1");
			}
			set
			{
				this.OnPropertyChanging("StreetOne");
				this.SetAttributeValue("address1_line1", value);
				this.OnPropertyChanged("StreetOne");
			}
		}
		
		/// <summary>
		/// Type the second line of the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_line2")]
		public string StreetTwo
		{
			get
			{
				return this.GetAttributeValue<string>("address1_line2");
			}
			set
			{
				this.OnPropertyChanging("StreetTwo");
				this.SetAttributeValue("address1_line2", value);
				this.OnPropertyChanged("StreetTwo");
			}
		}
		
		/// <summary>
		/// Type the third line of the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_line3")]
		public string StreetThree
		{
			get
			{
				return this.GetAttributeValue<string>("address1_line3");
			}
			set
			{
				this.OnPropertyChanging("StreetThree");
				this.SetAttributeValue("address1_line3", value);
				this.OnPropertyChanged("StreetThree");
			}
		}
		
		/// <summary>
		/// Type the longitude value for the primary address for use in mapping and other applications.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_longitude")]
		public Nullable<double> AddressOneLongitude
		{
			get
			{
				return this.GetAttributeValue<Nullable<double>>("address1_longitude");
			}
			set
			{
				this.OnPropertyChanging("AddressOneLongitude");
				this.SetAttributeValue("address1_longitude", value);
				this.OnPropertyChanged("AddressOneLongitude");
			}
		}
		
		/// <summary>
		/// Type a descriptive name for the primary address, such as Corporate Headquarters.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_name")]
		public string AddressOneName
		{
			get
			{
				return this.GetAttributeValue<string>("address1_name");
			}
			set
			{
				this.OnPropertyChanging("AddressOneName");
				this.SetAttributeValue("address1_name", value);
				this.OnPropertyChanged("AddressOneName");
			}
		}
		
		/// <summary>
		/// Type the ZIP Code or postal code for the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_postalcode")]
		public string ZIPPostalCode
		{
			get
			{
				return this.GetAttributeValue<string>("address1_postalcode");
			}
			set
			{
				this.OnPropertyChanging("ZIPPostalCode");
				this.SetAttributeValue("address1_postalcode", value);
				this.OnPropertyChanged("ZIPPostalCode");
			}
		}
		
		/// <summary>
		/// Type the post office box number of the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_postofficebox")]
		public string AddressOnePostOfficeBox
		{
			get
			{
				return this.GetAttributeValue<string>("address1_postofficebox");
			}
			set
			{
				this.OnPropertyChanging("AddressOnePostOfficeBox");
				this.SetAttributeValue("address1_postofficebox", value);
				this.OnPropertyChanged("AddressOnePostOfficeBox");
			}
		}
		
		/// <summary>
		/// Select a shipping method for deliveries sent to this address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_shippingmethodcode")]
		public Nullable<LeadAddressOneShippingMethod> AddressOneShippingMethod
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("address1_shippingmethodcode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadAddressOneShippingMethod)(Enum.ToObject(typeof(LeadAddressOneShippingMethod), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("AddressOneShippingMethod");
				if (value == null)
				{
					this.SetAttributeValue("address1_shippingmethodcode", null);
				}
				else
				{
					this.SetAttributeValue("address1_shippingmethodcode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("AddressOneShippingMethod");
			}
		}
		
		/// <summary>
		/// Type the state or province of the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_stateorprovince")]
		public string StateProvince
		{
			get
			{
				return this.GetAttributeValue<string>("address1_stateorprovince");
			}
			set
			{
				this.OnPropertyChanging("StateProvince");
				this.SetAttributeValue("address1_stateorprovince", value);
				this.OnPropertyChanged("StateProvince");
			}
		}
		
		/// <summary>
		/// Type the main phone number associated with the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_telephone1")]
		public string AddressOneTelephoneOne
		{
			get
			{
				return this.GetAttributeValue<string>("address1_telephone1");
			}
			set
			{
				this.OnPropertyChanging("AddressOneTelephoneOne");
				this.SetAttributeValue("address1_telephone1", value);
				this.OnPropertyChanged("AddressOneTelephoneOne");
			}
		}
		
		/// <summary>
		/// Type a second phone number associated with the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_telephone2")]
		public string AddressOneTelephoneTwo
		{
			get
			{
				return this.GetAttributeValue<string>("address1_telephone2");
			}
			set
			{
				this.OnPropertyChanging("AddressOneTelephoneTwo");
				this.SetAttributeValue("address1_telephone2", value);
				this.OnPropertyChanged("AddressOneTelephoneTwo");
			}
		}
		
		/// <summary>
		/// Type a third phone number associated with the primary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_telephone3")]
		public string AddressOneTelephoneThree
		{
			get
			{
				return this.GetAttributeValue<string>("address1_telephone3");
			}
			set
			{
				this.OnPropertyChanging("AddressOneTelephoneThree");
				this.SetAttributeValue("address1_telephone3", value);
				this.OnPropertyChanged("AddressOneTelephoneThree");
			}
		}
		
		/// <summary>
		/// Type the UPS zone of the primary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_upszone")]
		public string AddressOneUPSZone
		{
			get
			{
				return this.GetAttributeValue<string>("address1_upszone");
			}
			set
			{
				this.OnPropertyChanging("AddressOneUPSZone");
				this.SetAttributeValue("address1_upszone", value);
				this.OnPropertyChanged("AddressOneUPSZone");
			}
		}
		
		/// <summary>
		/// Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
		/// </summary>
		[AttributeLogicalNameAttribute("address1_utcoffset")]
		public Nullable<int> AddressOneUTCOffset
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("address1_utcoffset");
			}
			set
			{
				this.OnPropertyChanging("AddressOneUTCOffset");
				this.SetAttributeValue("address1_utcoffset", value);
				this.OnPropertyChanged("AddressOneUTCOffset");
			}
		}
		
		/// <summary>
		/// Unique identifier for address 2.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_addressid")]
		public Nullable<Guid> AddressTwoAddressId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("address2_addressid");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoAddressId");
				this.SetAttributeValue("address2_addressid", value);
				this.OnPropertyChanged("AddressTwoAddressId");
			}
		}
		
		/// <summary>
		/// Select the secondary address type.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_addresstypecode")]
		public Nullable<LeadAddressTwoAddressType> AddressTwoAddressType
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("address2_addresstypecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadAddressTwoAddressType)(Enum.ToObject(typeof(LeadAddressTwoAddressType), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("AddressTwoAddressType");
				if (value == null)
				{
					this.SetAttributeValue("address2_addresstypecode", null);
				}
				else
				{
					this.SetAttributeValue("address2_addresstypecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("AddressTwoAddressType");
			}
		}
		
		/// <summary>
		/// Type the city for the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_city")]
		public string AddressTwoCity
		{
			get
			{
				return this.GetAttributeValue<string>("address2_city");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoCity");
				this.SetAttributeValue("address2_city", value);
				this.OnPropertyChanged("AddressTwoCity");
			}
		}
		
		/// <summary>
		/// Shows the complete secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_composite")]
		public string AddressTwo
		{
			get
			{
				return this.GetAttributeValue<string>("address2_composite");
			}
		}
		
		/// <summary>
		/// Type the country or region for the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_country")]
		public string AddressTwoCountryRegion
		{
			get
			{
				return this.GetAttributeValue<string>("address2_country");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoCountryRegion");
				this.SetAttributeValue("address2_country", value);
				this.OnPropertyChanged("AddressTwoCountryRegion");
			}
		}
		
		/// <summary>
		/// Type the county for the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_county")]
		public string AddressTwoCounty
		{
			get
			{
				return this.GetAttributeValue<string>("address2_county");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoCounty");
				this.SetAttributeValue("address2_county", value);
				this.OnPropertyChanged("AddressTwoCounty");
			}
		}
		
		/// <summary>
		/// Type the fax number associated with the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_fax")]
		public string AddressTwoFax
		{
			get
			{
				return this.GetAttributeValue<string>("address2_fax");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoFax");
				this.SetAttributeValue("address2_fax", value);
				this.OnPropertyChanged("AddressTwoFax");
			}
		}
		
		/// <summary>
		/// Type the latitude value for the secondary address for use in mapping and other applications.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_latitude")]
		public Nullable<double> AddressTwoLatitude
		{
			get
			{
				return this.GetAttributeValue<Nullable<double>>("address2_latitude");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoLatitude");
				this.SetAttributeValue("address2_latitude", value);
				this.OnPropertyChanged("AddressTwoLatitude");
			}
		}
		
		/// <summary>
		/// Type the first line of the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_line1")]
		public string AddressTwoStreetOne
		{
			get
			{
				return this.GetAttributeValue<string>("address2_line1");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoStreetOne");
				this.SetAttributeValue("address2_line1", value);
				this.OnPropertyChanged("AddressTwoStreetOne");
			}
		}
		
		/// <summary>
		/// Type the second line of the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_line2")]
		public string AddressTwoStreetTwo
		{
			get
			{
				return this.GetAttributeValue<string>("address2_line2");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoStreetTwo");
				this.SetAttributeValue("address2_line2", value);
				this.OnPropertyChanged("AddressTwoStreetTwo");
			}
		}
		
		/// <summary>
		/// Type the third line of the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_line3")]
		public string AddressTwoStreetThree
		{
			get
			{
				return this.GetAttributeValue<string>("address2_line3");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoStreetThree");
				this.SetAttributeValue("address2_line3", value);
				this.OnPropertyChanged("AddressTwoStreetThree");
			}
		}
		
		/// <summary>
		/// Type the longitude value for the secondary address for use in mapping and other applications.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_longitude")]
		public Nullable<double> AddressTwoLongitude
		{
			get
			{
				return this.GetAttributeValue<Nullable<double>>("address2_longitude");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoLongitude");
				this.SetAttributeValue("address2_longitude", value);
				this.OnPropertyChanged("AddressTwoLongitude");
			}
		}
		
		/// <summary>
		/// Type a descriptive name for the secondary address, such as Corporate Headquarters.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_name")]
		public string AddressTwoName
		{
			get
			{
				return this.GetAttributeValue<string>("address2_name");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoName");
				this.SetAttributeValue("address2_name", value);
				this.OnPropertyChanged("AddressTwoName");
			}
		}
		
		/// <summary>
		/// Type the ZIP Code or postal code for the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_postalcode")]
		public string AddressTwoZIPPostalCode
		{
			get
			{
				return this.GetAttributeValue<string>("address2_postalcode");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoZIPPostalCode");
				this.SetAttributeValue("address2_postalcode", value);
				this.OnPropertyChanged("AddressTwoZIPPostalCode");
			}
		}
		
		/// <summary>
		/// Type the post office box number of the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_postofficebox")]
		public string AddressTwoPostOfficeBox
		{
			get
			{
				return this.GetAttributeValue<string>("address2_postofficebox");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoPostOfficeBox");
				this.SetAttributeValue("address2_postofficebox", value);
				this.OnPropertyChanged("AddressTwoPostOfficeBox");
			}
		}
		
		/// <summary>
		/// Select a shipping method for deliveries sent to this address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_shippingmethodcode")]
		public Nullable<LeadAddressTwoShippingMethod> AddressTwoShippingMethod
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("address2_shippingmethodcode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadAddressTwoShippingMethod)(Enum.ToObject(typeof(LeadAddressTwoShippingMethod), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("AddressTwoShippingMethod");
				if (value == null)
				{
					this.SetAttributeValue("address2_shippingmethodcode", null);
				}
				else
				{
					this.SetAttributeValue("address2_shippingmethodcode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("AddressTwoShippingMethod");
			}
		}
		
		/// <summary>
		/// Type the state or province of the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_stateorprovince")]
		public string AddressTwoStateProvince
		{
			get
			{
				return this.GetAttributeValue<string>("address2_stateorprovince");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoStateProvince");
				this.SetAttributeValue("address2_stateorprovince", value);
				this.OnPropertyChanged("AddressTwoStateProvince");
			}
		}
		
		/// <summary>
		/// Type the main phone number associated with the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_telephone1")]
		public string AddressTwoTelephoneOne
		{
			get
			{
				return this.GetAttributeValue<string>("address2_telephone1");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoTelephoneOne");
				this.SetAttributeValue("address2_telephone1", value);
				this.OnPropertyChanged("AddressTwoTelephoneOne");
			}
		}
		
		/// <summary>
		/// Type a second phone number associated with the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_telephone2")]
		public string AddressTwoTelephoneTwo
		{
			get
			{
				return this.GetAttributeValue<string>("address2_telephone2");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoTelephoneTwo");
				this.SetAttributeValue("address2_telephone2", value);
				this.OnPropertyChanged("AddressTwoTelephoneTwo");
			}
		}
		
		/// <summary>
		/// Type a third phone number associated with the secondary address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_telephone3")]
		public string AddressTwoTelephoneThree
		{
			get
			{
				return this.GetAttributeValue<string>("address2_telephone3");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoTelephoneThree");
				this.SetAttributeValue("address2_telephone3", value);
				this.OnPropertyChanged("AddressTwoTelephoneThree");
			}
		}
		
		/// <summary>
		/// Type the UPS zone of the secondary address to make sure shipping charges are calculated correctly and deliveries are made promptly, if shipped by UPS.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_upszone")]
		public string AddressTwoUPSZone
		{
			get
			{
				return this.GetAttributeValue<string>("address2_upszone");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoUPSZone");
				this.SetAttributeValue("address2_upszone", value);
				this.OnPropertyChanged("AddressTwoUPSZone");
			}
		}
		
		/// <summary>
		/// Select the time zone, or UTC offset, for this address so that other people can reference it when they contact someone at this address.
		/// </summary>
		[AttributeLogicalNameAttribute("address2_utcoffset")]
		public Nullable<int> AddressTwoUTCOffset
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("address2_utcoffset");
			}
			set
			{
				this.OnPropertyChanging("AddressTwoUTCOffset");
				this.SetAttributeValue("address2_utcoffset", value);
				this.OnPropertyChanged("AddressTwoUTCOffset");
			}
		}
		
		/// <summary>
		/// Unique identifier for SLA KPI Instance associated with Lead.
		/// </summary>
		[AttributeLogicalNameAttribute("aylos_contactwithinonehourid")]
		public EntityReference ContactWithinOneHour
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("aylos_contactwithinonehourid");
			}
			set
			{
				this.OnPropertyChanging("ContactWithinOneHour");
				this.SetAttributeValue("aylos_contactwithinonehourid", value);
				this.OnPropertyChanged("ContactWithinOneHour");
			}
		}
		
		/// <summary>
		/// Information about the budget amount of the lead's company or organization.
		/// </summary>
		[AttributeLogicalNameAttribute("budgetamount")]
		public Money BudgetAmount
		{
			get
			{
				return this.GetAttributeValue<Money>("budgetamount");
			}
			set
			{
				this.OnPropertyChanging("BudgetAmount");
				this.SetAttributeValue("budgetamount", value);
				this.OnPropertyChanged("BudgetAmount");
			}
		}
		
		/// <summary>
		/// Value of the Budget Amount in base currency.
		/// </summary>
		[AttributeLogicalNameAttribute("budgetamount_base")]
		public Money BudgetAmountBase
		{
			get
			{
				return this.GetAttributeValue<Money>("budgetamount_base");
			}
		}
		
		/// <summary>
		/// Information about the budget status of the lead's company or organization.
		/// </summary>
		[AttributeLogicalNameAttribute("budgetstatus")]
		public Nullable<GlobalBudget> Budget
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("budgetstatus");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalBudget)(Enum.ToObject(typeof(GlobalBudget), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Budget");
				if (value == null)
				{
					this.SetAttributeValue("budgetstatus", null);
				}
				else
				{
					this.SetAttributeValue("budgetstatus", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Budget");
			}
		}
		
		/// <summary>
		/// Stores Image of the Business Card
		/// </summary>
		[AttributeLogicalNameAttribute("businesscard")]
		public string BusinessCard
		{
			get
			{
				return this.GetAttributeValue<string>("businesscard");
			}
			set
			{
				this.OnPropertyChanging("BusinessCard");
				this.SetAttributeValue("businesscard", value);
				this.OnPropertyChanged("BusinessCard");
			}
		}
		
		/// <summary>
		/// Stores Business Card Control Properties.
		/// </summary>
		[AttributeLogicalNameAttribute("businesscardattributes")]
		public string BusinessCardAttributes
		{
			get
			{
				return this.GetAttributeValue<string>("businesscardattributes");
			}
			set
			{
				this.OnPropertyChanging("BusinessCardAttributes");
				this.SetAttributeValue("businesscardattributes", value);
				this.OnPropertyChanged("BusinessCardAttributes");
			}
		}
		
		/// <summary>
		/// Choose the campaign that the lead was generated from to track the effectiveness of marketing campaigns and identify  communications received by the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("campaignid")]
		public EntityReference SourceCampaign
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("campaignid");
			}
			set
			{
				this.OnPropertyChanging("SourceCampaign");
				this.SetAttributeValue("campaignid", value);
				this.OnPropertyChanged("SourceCampaign");
			}
		}
		
		/// <summary>
		/// Type the name of the company associated with the lead. This becomes the account name when the lead is qualified and converted to a customer account.
		/// </summary>
		[AttributeLogicalNameAttribute("companyname")]
		public string CompanyName
		{
			get
			{
				return this.GetAttributeValue<string>("companyname");
			}
			set
			{
				this.OnPropertyChanging("CompanyName");
				this.SetAttributeValue("companyname", value);
				this.OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// Select whether the lead confirmed interest in your offerings. This helps in determining the lead quality.
		/// </summary>
		[AttributeLogicalNameAttribute("confirminterest")]
		public Nullable<bool> ConfirmInterest
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("confirminterest");
			}
			set
			{
				this.OnPropertyChanging("ConfirmInterest");
				this.SetAttributeValue("confirminterest", value);
				this.OnPropertyChanged("ConfirmInterest");
			}
		}
		
		/// <summary>
		/// Unique identifier of the contact with which the lead is associated.
		/// </summary>
		[AttributeLogicalNameAttribute("contactid")]
		public EntityReference Contact
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("contactid");
			}
		}
		
		/// <summary>
		/// Shows who created the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdby")]
		public EntityReference CreatedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("createdby");
			}
			set
			{
				this.OnPropertyChanging("CreatedBy");
				this.SetAttributeValue("createdby", value);
				this.OnPropertyChanged("CreatedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the record was created.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("createdon")]
		public Nullable<DateTime> CreatedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("createdon");
			}
			set
			{
				this.OnPropertyChanging("CreatedOn");
				this.SetAttributeValue("createdon", value);
				this.OnPropertyChanged("CreatedOn");
			}
		}
		
		/// <summary>
		/// Select the customer account or contact to provide a quick link to additional customer details, such as account information, activities, and opportunities.
		/// </summary>
		[AttributeLogicalNameAttribute("customerid")]
		public EntityReference Customer
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("customerid");
			}
			set
			{
				this.OnPropertyChanging("Customer");
				this.SetAttributeValue("customerid", value);
				this.OnPropertyChanged("Customer");
			}
		}
		
		/// <summary>
		/// Select whether your notes include information about who makes the purchase decisions at the lead's company.
		/// </summary>
		[AttributeLogicalNameAttribute("decisionmaker")]
		public Nullable<bool> DecisionMaker
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("decisionmaker");
			}
			set
			{
				this.OnPropertyChanging("DecisionMaker");
				this.SetAttributeValue("decisionmaker", value);
				this.OnPropertyChanged("DecisionMaker");
			}
		}
		
		/// <summary>
		/// Type additional information to describe the lead, such as an excerpt from the company's website.
		/// </summary>
		[AttributeLogicalNameAttribute("description")]
		public string Description
		{
			get
			{
				return this.GetAttributeValue<string>("description");
			}
			set
			{
				this.OnPropertyChanging("Description");
				this.SetAttributeValue("description", value);
				this.OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// Select whether the lead accepts bulk email sent through marketing campaigns or quick campaigns. If Do Not Allow is selected, the lead can be added to marketing lists, but will be excluded from the email.
		/// </summary>
		[AttributeLogicalNameAttribute("donotbulkemail")]
		public Nullable<bool> DoNotAllowBulkEmails
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("donotbulkemail");
			}
			set
			{
				this.OnPropertyChanging("DoNotAllowBulkEmails");
				this.SetAttributeValue("donotbulkemail", value);
				this.OnPropertyChanged("DoNotAllowBulkEmails");
			}
		}
		
		/// <summary>
		/// Select whether the lead allows direct email sent from Microsoft Dynamics 365.
		/// </summary>
		[AttributeLogicalNameAttribute("donotemail")]
		public Nullable<bool> DoNotAllowEmails
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("donotemail");
			}
			set
			{
				this.OnPropertyChanging("DoNotAllowEmails");
				this.SetAttributeValue("donotemail", value);
				this.OnPropertyChanged("DoNotAllowEmails");
			}
		}
		
		/// <summary>
		/// Select whether the lead allows faxes.
		/// </summary>
		[AttributeLogicalNameAttribute("donotfax")]
		public Nullable<bool> DoNotAllowFaxes
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("donotfax");
			}
			set
			{
				this.OnPropertyChanging("DoNotAllowFaxes");
				this.SetAttributeValue("donotfax", value);
				this.OnPropertyChanged("DoNotAllowFaxes");
			}
		}
		
		/// <summary>
		/// Select whether the lead allows phone calls.
		/// </summary>
		[AttributeLogicalNameAttribute("donotphone")]
		public Nullable<bool> DoNotAllowPhoneCalls
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("donotphone");
			}
			set
			{
				this.OnPropertyChanging("DoNotAllowPhoneCalls");
				this.SetAttributeValue("donotphone", value);
				this.OnPropertyChanged("DoNotAllowPhoneCalls");
			}
		}
		
		/// <summary>
		/// Select whether the lead allows direct mail.
		/// </summary>
		[AttributeLogicalNameAttribute("donotpostalmail")]
		public Nullable<bool> DoNotAllowMails
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("donotpostalmail");
			}
			set
			{
				this.OnPropertyChanging("DoNotAllowMails");
				this.SetAttributeValue("donotpostalmail", value);
				this.OnPropertyChanged("DoNotAllowMails");
			}
		}
		
		/// <summary>
		/// Select whether the lead accepts marketing materials, such as brochures or catalogs. Leads that opt out can be excluded from marketing initiatives.
		/// </summary>
		[AttributeLogicalNameAttribute("donotsendmm")]
		public Nullable<bool> MarketingMaterial
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("donotsendmm");
			}
			set
			{
				this.OnPropertyChanging("MarketingMaterial");
				this.SetAttributeValue("donotsendmm", value);
				this.OnPropertyChanged("MarketingMaterial");
			}
		}
		
		/// <summary>
		/// Type the primary email address for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("emailaddress1")]
		public string Email
		{
			get
			{
				return this.GetAttributeValue<string>("emailaddress1");
			}
			set
			{
				this.OnPropertyChanging("Email");
				this.SetAttributeValue("emailaddress1", value);
				this.OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// Type the secondary email address for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("emailaddress2")]
		public string EmailAddressTwo
		{
			get
			{
				return this.GetAttributeValue<string>("emailaddress2");
			}
			set
			{
				this.OnPropertyChanging("EmailAddressTwo");
				this.SetAttributeValue("emailaddress2", value);
				this.OnPropertyChanged("EmailAddressTwo");
			}
		}
		
		/// <summary>
		/// Type a third email address for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("emailaddress3")]
		public string EmailAddressThree
		{
			get
			{
				return this.GetAttributeValue<string>("emailaddress3");
			}
			set
			{
				this.OnPropertyChanging("EmailAddressThree");
				this.SetAttributeValue("emailaddress3", value);
				this.OnPropertyChanged("EmailAddressThree");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("entityimageid")]
		public Nullable<Guid> EntityImageId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("entityimageid");
			}
		}
		
		/// <summary>
		/// Type the estimated revenue value that this lead will generate to assist in sales forecasting and planning.
		/// </summary>
		[AttributeLogicalNameAttribute("estimatedamount")]
		public Money EstValue
		{
			get
			{
				return this.GetAttributeValue<Money>("estimatedamount");
			}
			set
			{
				this.OnPropertyChanging("EstValue");
				this.SetAttributeValue("estimatedamount", value);
				this.OnPropertyChanged("EstValue");
			}
		}
		
		/// <summary>
		/// Value of the Est. Value in base currency.
		/// </summary>
		[AttributeLogicalNameAttribute("estimatedamount_base")]
		public Money EstValueBase
		{
			get
			{
				return this.GetAttributeValue<Money>("estimatedamount_base");
			}
		}
		
		/// <summary>
		/// Enter the expected close date for the lead, so that the sales team can schedule timely follow-up meetings to move the prospect to the next sales stage.
		/// </summary>
		[AttributeLogicalNameAttribute("estimatedclosedate")]
		public Nullable<DateTime> EstCloseDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("estimatedclosedate");
			}
			set
			{
				this.OnPropertyChanging("EstCloseDate");
				this.SetAttributeValue("estimatedclosedate", value);
				this.OnPropertyChanged("EstCloseDate");
			}
		}
		
		/// <summary>
		/// Type a numeric value of the lead's estimated value, such as a product quantity, if no revenue amount can be specified in the Est. Value field. This can be used for sales forecasting and planning.
		/// </summary>
		[AttributeLogicalNameAttribute("estimatedvalue")]
		public Nullable<double> EstValueDeprecated
		{
			get
			{
				return this.GetAttributeValue<Nullable<double>>("estimatedvalue");
			}
			set
			{
				this.OnPropertyChanging("EstValueDeprecated");
				this.SetAttributeValue("estimatedvalue", value);
				this.OnPropertyChanged("EstValueDeprecated");
			}
		}
		
		/// <summary>
		/// Select whether the fit between the lead's requirements and your offerings was evaluated.
		/// </summary>
		[AttributeLogicalNameAttribute("evaluatefit")]
		public Nullable<bool> EvaluateFit
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("evaluatefit");
			}
			set
			{
				this.OnPropertyChanging("EvaluateFit");
				this.SetAttributeValue("evaluatefit", value);
				this.OnPropertyChanged("EvaluateFit");
			}
		}
		
		/// <summary>
		/// Shows the conversion rate of the record's currency. The exchange rate is used to convert all money fields in the record from the local currency to the system's default currency.
		/// </summary>
		[AttributeLogicalNameAttribute("exchangerate")]
		public Nullable<decimal> ExchangeRate
		{
			get
			{
				return this.GetAttributeValue<Nullable<decimal>>("exchangerate");
			}
		}
		
		/// <summary>
		/// Type the fax number for the primary contact for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("fax")]
		public string Fax
		{
			get
			{
				return this.GetAttributeValue<string>("fax");
			}
			set
			{
				this.OnPropertyChanging("Fax");
				this.SetAttributeValue("fax", value);
				this.OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// Type the first name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.
		/// </summary>
		[AttributeLogicalNameAttribute("firstname")]
		public string FirstName
		{
			get
			{
				return this.GetAttributeValue<string>("firstname");
			}
			set
			{
				this.OnPropertyChanging("FirstName");
				this.SetAttributeValue("firstname", value);
				this.OnPropertyChanged("FirstName");
			}
		}
		
		/// <summary>
		/// Information about whether to allow following email activity like opens, attachment views and link clicks for emails sent to the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("followemail")]
		public Nullable<bool> FollowEmailActivity
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("followemail");
			}
			set
			{
				this.OnPropertyChanging("FollowEmailActivity");
				this.SetAttributeValue("followemail", value);
				this.OnPropertyChanged("FollowEmailActivity");
			}
		}
		
		/// <summary>
		/// Combines and shows the lead's first and last names so the full name can be displayed in views and reports.
		/// </summary>
		[AttributeLogicalNameAttribute("fullname")]
		public string Name
		{
			get
			{
				return this.GetAttributeValue<string>("fullname");
			}
		}
		
		/// <summary>
		/// Select the primary industry in which the lead's business is focused, for use in marketing segmentation and demographic analysis.
		/// </summary>
		[AttributeLogicalNameAttribute("industrycode")]
		public Nullable<LeadIndustry> Industry
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("industrycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadIndustry)(Enum.ToObject(typeof(LeadIndustry), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Industry");
				if (value == null)
				{
					this.SetAttributeValue("industrycode", null);
				}
				else
				{
					this.SetAttributeValue("industrycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Industry");
			}
		}
		
		/// <summary>
		/// Choose whether someone from the sales team contacted this lead earlier.
		/// </summary>
		[AttributeLogicalNameAttribute("initialcommunication")]
		public Nullable<GlobalInitialCommunication> InitialCommunication
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("initialcommunication");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalInitialCommunication)(Enum.ToObject(typeof(GlobalInitialCommunication), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("InitialCommunication");
				if (value == null)
				{
					this.SetAttributeValue("initialcommunication", null);
				}
				else
				{
					this.SetAttributeValue("initialcommunication", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("InitialCommunication");
			}
		}
		
		/// <summary>
		/// Type the job title of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.
		/// </summary>
		[AttributeLogicalNameAttribute("jobtitle")]
		public string JobTitle
		{
			get
			{
				return this.GetAttributeValue<string>("jobtitle");
			}
			set
			{
				this.OnPropertyChanging("JobTitle");
				this.SetAttributeValue("jobtitle", value);
				this.OnPropertyChanged("JobTitle");
			}
		}
		
		/// <summary>
		/// Type the last name of the primary contact for the lead to make sure the prospect is addressed correctly in sales calls, email, and marketing campaigns.
		/// </summary>
		[AttributeLogicalNameAttribute("lastname")]
		public string LastName
		{
			get
			{
				return this.GetAttributeValue<string>("lastname");
			}
			set
			{
				this.OnPropertyChanging("LastName");
				this.SetAttributeValue("lastname", value);
				this.OnPropertyChanged("LastName");
			}
		}
		
		/// <summary>
		/// Contains the date and time stamp of the last on hold time.
		/// </summary>
		[AttributeLogicalNameAttribute("lastonholdtime")]
		public Nullable<DateTime> LastOnHoldTime
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("lastonholdtime");
			}
			set
			{
				this.OnPropertyChanging("LastOnHoldTime");
				this.SetAttributeValue("lastonholdtime", value);
				this.OnPropertyChanged("LastOnHoldTime");
			}
		}
		
		/// <summary>
		/// Shows the date when the lead was last included in a marketing campaign or quick campaign.
		/// </summary>
		[AttributeLogicalNameAttribute("lastusedincampaign")]
		public Nullable<DateTime> LastCampaignDate
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("lastusedincampaign");
			}
			set
			{
				this.OnPropertyChanging("LastCampaignDate");
				this.SetAttributeValue("lastusedincampaign", value);
				this.OnPropertyChanged("LastCampaignDate");
			}
		}
		
		/// <summary>
		/// Unique identifier of the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("leadid")]
		public Nullable<Guid> LeadId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("leadid");
			}
			set
			{
				this.OnPropertyChanging("LeadId");
				this.SetAttributeValue("leadid", value);
				if (value.HasValue)
				{
					base.Id = value.Value;
				}
				else
				{
					base.Id = Guid.Empty;
				}
				this.OnPropertyChanged("LeadId");
			}
		}
		
		[AttributeLogicalNameAttribute("leadid")]
		public override Guid Id
		{
			get
			{
				return base.Id;
			}
			set
			{
				this.LeadId = value;
			}
		}
		
		/// <summary>
		/// Select a rating value to indicate the lead's potential to become a customer.
		/// </summary>
		[AttributeLogicalNameAttribute("leadqualitycode")]
		public Nullable<LeadRating> Rating
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("leadqualitycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadRating)(Enum.ToObject(typeof(LeadRating), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Rating");
				if (value == null)
				{
					this.SetAttributeValue("leadqualitycode", null);
				}
				else
				{
					this.SetAttributeValue("leadqualitycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Rating");
			}
		}
		
		/// <summary>
		/// Select the primary marketing source that prompted the lead to contact you.
		/// </summary>
		[AttributeLogicalNameAttribute("leadsourcecode")]
		public Nullable<LeadLeadSource> LeadSource
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("leadsourcecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadLeadSource)(Enum.ToObject(typeof(LeadLeadSource), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("LeadSource");
				if (value == null)
				{
					this.SetAttributeValue("leadsourcecode", null);
				}
				else
				{
					this.SetAttributeValue("leadsourcecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("LeadSource");
			}
		}
		
		/// <summary>
		/// Unique identifier of the master lead for merge.
		/// </summary>
		[AttributeLogicalNameAttribute("masterid")]
		public EntityReference MasterID
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("masterid");
			}
		}
		
		/// <summary>
		/// Tells whether the lead has been merged with another lead.
		/// </summary>
		[AttributeLogicalNameAttribute("merged")]
		public Nullable<bool> Merged
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("merged");
			}
		}
		
		/// <summary>
		/// Type the middle name or initial of the primary contact for the lead to make sure the prospect is addressed correctly.
		/// </summary>
		[AttributeLogicalNameAttribute("middlename")]
		public string MiddleName
		{
			get
			{
				return this.GetAttributeValue<string>("middlename");
			}
			set
			{
				this.OnPropertyChanging("MiddleName");
				this.SetAttributeValue("middlename", value);
				this.OnPropertyChanged("MiddleName");
			}
		}
		
		/// <summary>
		/// Type the mobile phone number for the primary contact for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("mobilephone")]
		public string MobilePhone
		{
			get
			{
				return this.GetAttributeValue<string>("mobilephone");
			}
			set
			{
				this.OnPropertyChanging("MobilePhone");
				this.SetAttributeValue("mobilephone", value);
				this.OnPropertyChanged("MobilePhone");
			}
		}
		
		/// <summary>
		/// Shows who last updated the record.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedby")]
		public EntityReference ModifiedBy
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("modifiedby");
			}
			set
			{
				this.OnPropertyChanging("ModifiedBy");
				this.SetAttributeValue("modifiedby", value);
				this.OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// Date and time when the record was modified.
		/// </summary>
		/// <remarks>
		/// The property is read-only and the setter has been added to assist with unit testing only.
		/// </remarks>
		[AttributeLogicalNameAttribute("modifiedon")]
		public Nullable<DateTime> ModifiedOn
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("modifiedon");
			}
			set
			{
				this.OnPropertyChanging("ModifiedOn");
				this.SetAttributeValue("modifiedon", value);
				this.OnPropertyChanged("ModifiedOn");
			}
		}
		
		/// <summary>
		/// Describes whether lead is opted out or not
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_gdproptout")]
		public Nullable<bool> GDPROptout
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("msdyn_gdproptout");
			}
			set
			{
				this.OnPropertyChanging("GDPROptout");
				this.SetAttributeValue("msdyn_gdproptout", value);
				this.OnPropertyChanged("GDPROptout");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_leadgrade")]
		public Nullable<GlobalLeadGrade> DeprecatedLeadGrade
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("msdyn_leadgrade");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalLeadGrade)(Enum.ToObject(typeof(GlobalLeadGrade), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("DeprecatedLeadGrade");
				if (value == null)
				{
					this.SetAttributeValue("msdyn_leadgrade", null);
				}
				else
				{
					this.SetAttributeValue("msdyn_leadgrade", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("DeprecatedLeadGrade");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_leadscore")]
		public Nullable<int> DeprecatedLeadScore
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("msdyn_leadscore");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedLeadScore");
				this.SetAttributeValue("msdyn_leadscore", value);
				this.OnPropertyChanged("DeprecatedLeadScore");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_leadscoretrend")]
		public Nullable<GlobalLeadScoreTrend> DeprecatedLeadScoreTrend
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("msdyn_leadscoretrend");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalLeadScoreTrend)(Enum.ToObject(typeof(GlobalLeadScoreTrend), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("DeprecatedLeadScoreTrend");
				if (value == null)
				{
					this.SetAttributeValue("msdyn_leadscoretrend", null);
				}
				else
				{
					this.SetAttributeValue("msdyn_leadscoretrend", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("DeprecatedLeadScoreTrend");
			}
		}
		
		/// <summary>
		/// Predictive score
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_predictivescoreid")]
		public EntityReference PredictiveScore
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("msdyn_predictivescoreid");
			}
			set
			{
				this.OnPropertyChanging("PredictiveScore");
				this.SetAttributeValue("msdyn_predictivescoreid", value);
				this.OnPropertyChanged("PredictiveScore");
			}
		}
		
		/// <summary>
		/// Result of the assignment rule process
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_salesassignmentresult")]
		public Nullable<LeadAssignmentRuleResult> AssignmentRuleResult
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("msdyn_salesassignmentresult");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadAssignmentRuleResult)(Enum.ToObject(typeof(LeadAssignmentRuleResult), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("AssignmentRuleResult");
				if (value == null)
				{
					this.SetAttributeValue("msdyn_salesassignmentresult", null);
				}
				else
				{
					this.SetAttributeValue("msdyn_salesassignmentresult", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("AssignmentRuleResult");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_scorehistory")]
		public string DeprecatedScoreHistory
		{
			get
			{
				return this.GetAttributeValue<string>("msdyn_scorehistory");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedScoreHistory");
				this.SetAttributeValue("msdyn_scorehistory", value);
				this.OnPropertyChanged("DeprecatedScoreHistory");
			}
		}
		
		/// <summary>
		/// 
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_scorereasons")]
		public string DeprecatedScoreReasons
		{
			get
			{
				return this.GetAttributeValue<string>("msdyn_scorereasons");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedScoreReasons");
				this.SetAttributeValue("msdyn_scorereasons", value);
				this.OnPropertyChanged("DeprecatedScoreReasons");
			}
		}
		
		/// <summary>
		/// Unique identifier for Segment associated with Lead.
		/// </summary>
		[AttributeLogicalNameAttribute("msdyn_segmentid")]
		public EntityReference SegmentId
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("msdyn_segmentid");
			}
			set
			{
				this.OnPropertyChanging("SegmentId");
				this.SetAttributeValue("msdyn_segmentid", value);
				this.OnPropertyChanged("SegmentId");
			}
		}
		
		/// <summary>
		/// Choose how high the level of need is for the lead's company.
		/// </summary>
		[AttributeLogicalNameAttribute("need")]
		public Nullable<GlobalNeed> Need
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("need");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalNeed)(Enum.ToObject(typeof(GlobalNeed), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Need");
				if (value == null)
				{
					this.SetAttributeValue("need", null);
				}
				else
				{
					this.SetAttributeValue("need", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Need");
			}
		}
		
		/// <summary>
		/// Type the number of employees that work at the company associated with the lead, for use in marketing segmentation and demographic analysis.
		/// </summary>
		[AttributeLogicalNameAttribute("numberofemployees")]
		public Nullable<int> NoOfEmployees
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("numberofemployees");
			}
			set
			{
				this.OnPropertyChanging("NoOfEmployees");
				this.SetAttributeValue("numberofemployees", value);
				this.OnPropertyChanged("NoOfEmployees");
			}
		}
		
		/// <summary>
		/// Shows how long, in minutes, that the record was on hold.
		/// </summary>
		[AttributeLogicalNameAttribute("onholdtime")]
		public Nullable<int> OnHoldTimeMinutes
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("onholdtime");
			}
		}
		
		/// <summary>
		/// This attribute is used for Sample Service Business Processes.
		/// </summary>
		[AttributeLogicalNameAttribute("originatingcaseid")]
		public EntityReference OriginatingCase
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("originatingcaseid");
			}
			set
			{
				this.OnPropertyChanging("OriginatingCase");
				this.SetAttributeValue("originatingcaseid", value);
				this.OnPropertyChanged("OriginatingCase");
			}
		}
		
		/// <summary>
		/// Owner Id
		/// </summary>
		[AttributeLogicalNameAttribute("ownerid")]
		public EntityReference Owner
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("ownerid");
			}
			set
			{
				this.OnPropertyChanging("Owner");
				this.SetAttributeValue("ownerid", value);
				this.OnPropertyChanged("Owner");
			}
		}
		
		/// <summary>
		/// Unique identifier for the business unit that owns the record
		/// </summary>
		[AttributeLogicalNameAttribute("owningbusinessunit")]
		public EntityReference OwningBusinessUnit
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningbusinessunit");
			}
		}
		
		/// <summary>
		/// Unique identifier for the team that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owningteam")]
		public EntityReference OwningTeam
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owningteam");
			}
		}
		
		/// <summary>
		/// Unique identifier for the user that owns the record.
		/// </summary>
		[AttributeLogicalNameAttribute("owninguser")]
		public EntityReference OwningUser
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("owninguser");
			}
		}
		
		/// <summary>
		/// Type the pager number for the primary contact for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("pager")]
		public string Pager
		{
			get
			{
				return this.GetAttributeValue<string>("pager");
			}
			set
			{
				this.OnPropertyChanging("Pager");
				this.SetAttributeValue("pager", value);
				this.OnPropertyChanged("Pager");
			}
		}
		
		/// <summary>
		/// Choose an account to connect this lead to, so that the relationship is visible in reports and analytics.
		/// </summary>
		[AttributeLogicalNameAttribute("parentaccountid")]
		public EntityReference ParentAccountForLead
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("parentaccountid");
			}
			set
			{
				this.OnPropertyChanging("ParentAccountForLead");
				this.SetAttributeValue("parentaccountid", value);
				this.OnPropertyChanged("ParentAccountForLead");
			}
		}
		
		/// <summary>
		/// Choose a contact to connect this lead to, so that the relationship is visible in reports and analytics.
		/// </summary>
		[AttributeLogicalNameAttribute("parentcontactid")]
		public EntityReference ParentContactForLead
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("parentcontactid");
			}
			set
			{
				this.OnPropertyChanging("ParentContactForLead");
				this.SetAttributeValue("parentcontactid", value);
				this.OnPropertyChanged("ParentContactForLead");
			}
		}
		
		/// <summary>
		/// Shows whether the lead participates in workflow rules.
		/// </summary>
		[AttributeLogicalNameAttribute("participatesinworkflow")]
		public Nullable<bool> ParticipatesInWorkflow
		{
			get
			{
				return this.GetAttributeValue<Nullable<bool>>("participatesinworkflow");
			}
			set
			{
				this.OnPropertyChanging("ParticipatesInWorkflow");
				this.SetAttributeValue("participatesinworkflow", value);
				this.OnPropertyChanged("ParticipatesInWorkflow");
			}
		}
		
		/// <summary>
		/// Select the preferred method of contact.
		/// </summary>
		[AttributeLogicalNameAttribute("preferredcontactmethodcode")]
		public Nullable<LeadPreferredMethodOfContact> PreferredMethodOfContact
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("preferredcontactmethodcode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadPreferredMethodOfContact)(Enum.ToObject(typeof(LeadPreferredMethodOfContact), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("PreferredMethodOfContact");
				if (value == null)
				{
					this.SetAttributeValue("preferredcontactmethodcode", null);
				}
				else
				{
					this.SetAttributeValue("preferredcontactmethodcode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("PreferredMethodOfContact");
			}
		}
		
		/// <summary>
		/// Select the priority so that preferred customers or critical issues are handled quickly.
		/// </summary>
		[AttributeLogicalNameAttribute("prioritycode")]
		public Nullable<LeadPriority> Priority
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("prioritycode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadPriority)(Enum.ToObject(typeof(LeadPriority), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("Priority");
				if (value == null)
				{
					this.SetAttributeValue("prioritycode", null);
				}
				else
				{
					this.SetAttributeValue("prioritycode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("Priority");
			}
		}
		
		/// <summary>
		/// Contains the id of the process associated with the entity.
		/// </summary>
		[AttributeLogicalNameAttribute("processid")]
		public Nullable<Guid> ProcessId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("processid");
			}
			set
			{
				this.OnPropertyChanging("ProcessId");
				this.SetAttributeValue("processid", value);
				this.OnPropertyChanged("ProcessId");
			}
		}
		
		/// <summary>
		/// Choose whether an individual or a committee will be involved in the  purchase process for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("purchaseprocess")]
		public Nullable<GlobalPurchaseProcess> PurchaseProcess
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("purchaseprocess");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalPurchaseProcess)(Enum.ToObject(typeof(GlobalPurchaseProcess), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("PurchaseProcess");
				if (value == null)
				{
					this.SetAttributeValue("purchaseprocess", null);
				}
				else
				{
					this.SetAttributeValue("purchaseprocess", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("PurchaseProcess");
			}
		}
		
		/// <summary>
		/// Choose how long the lead will likely take to make the purchase, so the sales team will be aware.
		/// </summary>
		[AttributeLogicalNameAttribute("purchasetimeframe")]
		public Nullable<GlobalPurchaseTimeframe> PurchaseTimeframe
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("purchasetimeframe");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalPurchaseTimeframe)(Enum.ToObject(typeof(GlobalPurchaseTimeframe), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("PurchaseTimeframe");
				if (value == null)
				{
					this.SetAttributeValue("purchasetimeframe", null);
				}
				else
				{
					this.SetAttributeValue("purchasetimeframe", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("PurchaseTimeframe");
			}
		}
		
		/// <summary>
		/// Type comments about the qualification or scoring of the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("qualificationcomments")]
		public string QualificationComments
		{
			get
			{
				return this.GetAttributeValue<string>("qualificationcomments");
			}
			set
			{
				this.OnPropertyChanging("QualificationComments");
				this.SetAttributeValue("qualificationcomments", value);
				this.OnPropertyChanged("QualificationComments");
			}
		}
		
		/// <summary>
		/// Choose the opportunity that the lead was qualified on and then converted to.
		/// </summary>
		[AttributeLogicalNameAttribute("qualifyingopportunityid")]
		public EntityReference QualifyingOpportunity
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("qualifyingopportunityid");
			}
			set
			{
				this.OnPropertyChanging("QualifyingOpportunity");
				this.SetAttributeValue("qualifyingopportunityid", value);
				this.OnPropertyChanged("QualifyingOpportunity");
			}
		}
		
		/// <summary>
		/// Related Campaign Response.
		/// </summary>
		[AttributeLogicalNameAttribute("relatedobjectid")]
		public EntityReference RelatedCampaignResponse
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("relatedobjectid");
			}
			set
			{
				this.OnPropertyChanging("RelatedCampaignResponse");
				this.SetAttributeValue("relatedobjectid", value);
				this.OnPropertyChanged("RelatedCampaignResponse");
			}
		}
		
		/// <summary>
		/// Type the annual revenue of the company associated with the lead to provide an understanding of the prospect's business.
		/// </summary>
		[AttributeLogicalNameAttribute("revenue")]
		public Money AnnualRevenue
		{
			get
			{
				return this.GetAttributeValue<Money>("revenue");
			}
			set
			{
				this.OnPropertyChanging("AnnualRevenue");
				this.SetAttributeValue("revenue", value);
				this.OnPropertyChanged("AnnualRevenue");
			}
		}
		
		/// <summary>
		/// Value of the Annual Revenue in base currency.
		/// </summary>
		[AttributeLogicalNameAttribute("revenue_base")]
		public Money AnnualRevenueBase
		{
			get
			{
				return this.GetAttributeValue<Money>("revenue_base");
			}
		}
		
		/// <summary>
		/// Select the sales stage of this lead to aid the sales team in their efforts to convert this lead to an opportunity.
		/// </summary>
		[AttributeLogicalNameAttribute("salesstage")]
		public Nullable<GlobalLeadSalesStage> SalesStage
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("salesstage");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (GlobalLeadSalesStage)(Enum.ToObject(typeof(GlobalLeadSalesStage), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("SalesStage");
				if (value == null)
				{
					this.SetAttributeValue("salesstage", null);
				}
				else
				{
					this.SetAttributeValue("salesstage", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("SalesStage");
			}
		}
		
		/// <summary>
		/// Select the sales process stage for the lead to help determine the probability of the lead converting to an opportunity.
		/// </summary>
		[AttributeLogicalNameAttribute("salesstagecode")]
		public Nullable<LeadSalesStage> SalesStageCode
		{
			get
			{
				var optionSet = this.GetAttributeValue<OptionSetValue>("salesstagecode");
				if (optionSet == null)
				{
					return null;
				}
				else
				{
					return (LeadSalesStage)(Enum.ToObject(typeof(LeadSalesStage), optionSet.Value));
				}
			}
			set
			{
				this.OnPropertyChanging("SalesStageCode");
				if (value == null)
				{
					this.SetAttributeValue("salesstagecode", null);
				}
				else
				{
					this.SetAttributeValue("salesstagecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("SalesStageCode");
			}
		}
		
		/// <summary>
		/// Type the salutation of the primary contact for this lead to make sure the prospect is addressed correctly in sales calls, email messages, and marketing campaigns.
		/// </summary>
		[AttributeLogicalNameAttribute("salutation")]
		public string Salutation
		{
			get
			{
				return this.GetAttributeValue<string>("salutation");
			}
			set
			{
				this.OnPropertyChanging("Salutation");
				this.SetAttributeValue("salutation", value);
				this.OnPropertyChanged("Salutation");
			}
		}
		
		/// <summary>
		/// Enter the date and time of the prospecting follow-up meeting with the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("schedulefollowup_prospect")]
		public Nullable<DateTime> ScheduleFollowUpProspect
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("schedulefollowup_prospect");
			}
			set
			{
				this.OnPropertyChanging("ScheduleFollowUpProspect");
				this.SetAttributeValue("schedulefollowup_prospect", value);
				this.OnPropertyChanged("ScheduleFollowUpProspect");
			}
		}
		
		/// <summary>
		/// Enter the date and time of the qualifying follow-up meeting with the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("schedulefollowup_qualify")]
		public Nullable<DateTime> ScheduleFollowUpQualify
		{
			get
			{
				return this.GetAttributeValue<Nullable<DateTime>>("schedulefollowup_qualify");
			}
			set
			{
				this.OnPropertyChanging("ScheduleFollowUpQualify");
				this.SetAttributeValue("schedulefollowup_qualify", value);
				this.OnPropertyChanged("ScheduleFollowUpQualify");
			}
		}
		
		/// <summary>
		/// Type the Standard Industrial Classification (SIC) code that indicates the lead's primary industry of business for use in marketing segmentation and demographic analysis.
		/// </summary>
		[AttributeLogicalNameAttribute("sic")]
		public string SICCode
		{
			get
			{
				return this.GetAttributeValue<string>("sic");
			}
			set
			{
				this.OnPropertyChanging("SICCode");
				this.SetAttributeValue("sic", value);
				this.OnPropertyChanged("SICCode");
			}
		}
		
		/// <summary>
		/// Choose the service level agreement (SLA) that you want to apply to the Lead record.
		/// </summary>
		[AttributeLogicalNameAttribute("slaid")]
		public EntityReference SLA
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slaid");
			}
			set
			{
				this.OnPropertyChanging("SLA");
				this.SetAttributeValue("slaid", value);
				this.OnPropertyChanged("SLA");
			}
		}
		
		/// <summary>
		/// Last SLA that was applied to this case. This field is for internal use only.
		/// </summary>
		[AttributeLogicalNameAttribute("slainvokedid")]
		public EntityReference LastSLAApplied
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("slainvokedid");
			}
		}
		
		/// <summary>
		/// Contains the id of the stage where the entity is located.
		/// </summary>
		[AttributeLogicalNameAttribute("stageid")]
		public Nullable<Guid> DeprecatedStageId
		{
			get
			{
				return this.GetAttributeValue<Nullable<Guid>>("stageid");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedStageId");
				this.SetAttributeValue("stageid", value);
				this.OnPropertyChanged("DeprecatedStageId");
			}
		}
		
		/// <summary>
		/// Shows whether the lead is open, qualified, or disqualified. Qualified and disqualified leads are read-only and can't be edited unless they are reactivated.
		/// </summary>
		[AttributeLogicalNameAttribute("statecode")]
		public Nullable<LeadState> State
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statecode");
				if (optionSet != null)
				{
					return ((LeadState)(Enum.ToObject(typeof(LeadState), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("State");
				if (value == null)
				{
					this.SetAttributeValue("statecode", null);
				}
				else
				{
					this.SetAttributeValue("statecode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("State");
			}
		}
		
		/// <summary>
		/// Select the lead's status.
		/// </summary>
		[AttributeLogicalNameAttribute("statuscode")]
		public Nullable<LeadStatusReason> StatusReason
		{
			get
			{
				OptionSetValue optionSet = this.GetAttributeValue<OptionSetValue>("statuscode");
				if (optionSet != null)
				{
					return ((LeadStatusReason)(Enum.ToObject(typeof(LeadStatusReason), optionSet.Value)));
				}
				else
				{
					return null;
				}
			}
			set
			{
				this.OnPropertyChanging("StatusReason");
				if (value == null)
				{
					this.SetAttributeValue("statuscode", null);
				}
				else
				{
					this.SetAttributeValue("statuscode", new OptionSetValue((int)value));
				}
				this.OnPropertyChanged("StatusReason");
			}
		}
		
		/// <summary>
		/// Type a subject or descriptive name, such as the expected order, company name, or marketing source list, to identify the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("subject")]
		public string Topic
		{
			get
			{
				return this.GetAttributeValue<string>("subject");
			}
			set
			{
				this.OnPropertyChanging("Topic");
				this.SetAttributeValue("subject", value);
				this.OnPropertyChanged("Topic");
			}
		}
		
		/// <summary>
		/// Number of users or conversations followed the record
		/// </summary>
		[AttributeLogicalNameAttribute("teamsfollowed")]
		public Nullable<int> TeamsFollowed
		{
			get
			{
				return this.GetAttributeValue<Nullable<int>>("teamsfollowed");
			}
			set
			{
				this.OnPropertyChanging("TeamsFollowed");
				this.SetAttributeValue("teamsfollowed", value);
				this.OnPropertyChanged("TeamsFollowed");
			}
		}
		
		/// <summary>
		/// Type the work phone number for the primary contact for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("telephone1")]
		public string BusinessPhone
		{
			get
			{
				return this.GetAttributeValue<string>("telephone1");
			}
			set
			{
				this.OnPropertyChanging("BusinessPhone");
				this.SetAttributeValue("telephone1", value);
				this.OnPropertyChanged("BusinessPhone");
			}
		}
		
		/// <summary>
		/// Type the home phone number for the primary contact for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("telephone2")]
		public string HomePhone
		{
			get
			{
				return this.GetAttributeValue<string>("telephone2");
			}
			set
			{
				this.OnPropertyChanging("HomePhone");
				this.SetAttributeValue("telephone2", value);
				this.OnPropertyChanged("HomePhone");
			}
		}
		
		/// <summary>
		/// Type an alternate phone number for the primary contact for the lead.
		/// </summary>
		[AttributeLogicalNameAttribute("telephone3")]
		public string OtherPhone
		{
			get
			{
				return this.GetAttributeValue<string>("telephone3");
			}
			set
			{
				this.OnPropertyChanging("OtherPhone");
				this.SetAttributeValue("telephone3", value);
				this.OnPropertyChanged("OtherPhone");
			}
		}
		
		/// <summary>
		/// Total time spent for emails (read and write) and meetings by me in relation to the lead record.
		/// </summary>
		[AttributeLogicalNameAttribute("timespentbymeonemailandmeetings")]
		public string TimeSpentByMe
		{
			get
			{
				return this.GetAttributeValue<string>("timespentbymeonemailandmeetings");
			}
		}
		
		/// <summary>
		/// Choose the local currency for the record to make sure budgets are reported in the correct currency.
		/// </summary>
		[AttributeLogicalNameAttribute("transactioncurrencyid")]
		public EntityReference Currency
		{
			get
			{
				return this.GetAttributeValue<EntityReference>("transactioncurrencyid");
			}
			set
			{
				this.OnPropertyChanging("Currency");
				this.SetAttributeValue("transactioncurrencyid", value);
				this.OnPropertyChanged("Currency");
			}
		}
		
		/// <summary>
		/// A comma separated list of string values representing the unique identifiers of stages in a Business Process Flow Instance in the order that they occur.
		/// </summary>
		[AttributeLogicalNameAttribute("traversedpath")]
		public string DeprecatedTraversedPath
		{
			get
			{
				return this.GetAttributeValue<string>("traversedpath");
			}
			set
			{
				this.OnPropertyChanging("DeprecatedTraversedPath");
				this.SetAttributeValue("traversedpath", value);
				this.OnPropertyChanged("DeprecatedTraversedPath");
			}
		}
		
		/// <summary>
		/// Type the website URL for the company associated with this lead.
		/// </summary>
		[AttributeLogicalNameAttribute("websiteurl")]
		public string Website
		{
			get
			{
				return this.GetAttributeValue<string>("websiteurl");
			}
			set
			{
				this.OnPropertyChanging("Website");
				this.SetAttributeValue("websiteurl", value);
				this.OnPropertyChanged("Website");
			}
		}
		
		/// <summary>
		/// Type the phonetic spelling of the lead's company name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.
		/// </summary>
		[AttributeLogicalNameAttribute("yomicompanyname")]
		public string YomiCompanyName
		{
			get
			{
				return this.GetAttributeValue<string>("yomicompanyname");
			}
			set
			{
				this.OnPropertyChanging("YomiCompanyName");
				this.SetAttributeValue("yomicompanyname", value);
				this.OnPropertyChanged("YomiCompanyName");
			}
		}
		
		/// <summary>
		/// Type the phonetic spelling of the lead's first name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.
		/// </summary>
		[AttributeLogicalNameAttribute("yomifirstname")]
		public string YomiFirstName
		{
			get
			{
				return this.GetAttributeValue<string>("yomifirstname");
			}
			set
			{
				this.OnPropertyChanging("YomiFirstName");
				this.SetAttributeValue("yomifirstname", value);
				this.OnPropertyChanged("YomiFirstName");
			}
		}
		
		/// <summary>
		/// Combines and shows the lead's Yomi first and last names so the full phonetic name can be displayed in views and reports.
		/// </summary>
		[AttributeLogicalNameAttribute("yomifullname")]
		public string YomiFullName
		{
			get
			{
				return this.GetAttributeValue<string>("yomifullname");
			}
		}
		
		/// <summary>
		/// Type the phonetic spelling of the lead's last name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.
		/// </summary>
		[AttributeLogicalNameAttribute("yomilastname")]
		public string YomiLastName
		{
			get
			{
				return this.GetAttributeValue<string>("yomilastname");
			}
			set
			{
				this.OnPropertyChanging("YomiLastName");
				this.SetAttributeValue("yomilastname", value);
				this.OnPropertyChanged("YomiLastName");
			}
		}
		
		/// <summary>
		/// Type the phonetic spelling of the lead's middle name, if the name is specified in Japanese, to make sure the name is pronounced correctly in phone calls with the prospect.
		/// </summary>
		[AttributeLogicalNameAttribute("yomimiddlename")]
		public string YomiMiddleName
		{
			get
			{
				return this.GetAttributeValue<string>("yomimiddlename");
			}
			set
			{
				this.OnPropertyChanging("YomiMiddleName");
				this.SetAttributeValue("yomimiddlename", value);
				this.OnPropertyChanged("YomiMiddleName");
			}
		}
		
		public struct Fields
		{
			
			public static string Account = "accountid";
			
			public static string AddressOneAddressId = "address1_addressid";
			
			public static string AddressOneAddressType = "address1_addresstypecode";
			
			public static string City = "address1_city";
			
			public static string AddressOne = "address1_composite";
			
			public static string CountryRegion = "address1_country";
			
			public static string AddressOneCounty = "address1_county";
			
			public static string AddressOneFax = "address1_fax";
			
			public static string AddressOneLatitude = "address1_latitude";
			
			public static string StreetOne = "address1_line1";
			
			public static string StreetTwo = "address1_line2";
			
			public static string StreetThree = "address1_line3";
			
			public static string AddressOneLongitude = "address1_longitude";
			
			public static string AddressOneName = "address1_name";
			
			public static string ZIPPostalCode = "address1_postalcode";
			
			public static string AddressOnePostOfficeBox = "address1_postofficebox";
			
			public static string AddressOneShippingMethod = "address1_shippingmethodcode";
			
			public static string StateProvince = "address1_stateorprovince";
			
			public static string AddressOneTelephoneOne = "address1_telephone1";
			
			public static string AddressOneTelephoneTwo = "address1_telephone2";
			
			public static string AddressOneTelephoneThree = "address1_telephone3";
			
			public static string AddressOneUPSZone = "address1_upszone";
			
			public static string AddressOneUTCOffset = "address1_utcoffset";
			
			public static string AddressTwoAddressId = "address2_addressid";
			
			public static string AddressTwoAddressType = "address2_addresstypecode";
			
			public static string AddressTwoCity = "address2_city";
			
			public static string AddressTwo = "address2_composite";
			
			public static string AddressTwoCountryRegion = "address2_country";
			
			public static string AddressTwoCounty = "address2_county";
			
			public static string AddressTwoFax = "address2_fax";
			
			public static string AddressTwoLatitude = "address2_latitude";
			
			public static string AddressTwoStreetOne = "address2_line1";
			
			public static string AddressTwoStreetTwo = "address2_line2";
			
			public static string AddressTwoStreetThree = "address2_line3";
			
			public static string AddressTwoLongitude = "address2_longitude";
			
			public static string AddressTwoName = "address2_name";
			
			public static string AddressTwoZIPPostalCode = "address2_postalcode";
			
			public static string AddressTwoPostOfficeBox = "address2_postofficebox";
			
			public static string AddressTwoShippingMethod = "address2_shippingmethodcode";
			
			public static string AddressTwoStateProvince = "address2_stateorprovince";
			
			public static string AddressTwoTelephoneOne = "address2_telephone1";
			
			public static string AddressTwoTelephoneTwo = "address2_telephone2";
			
			public static string AddressTwoTelephoneThree = "address2_telephone3";
			
			public static string AddressTwoUPSZone = "address2_upszone";
			
			public static string AddressTwoUTCOffset = "address2_utcoffset";
			
			public static string ContactWithinOneHour = "aylos_contactwithinonehourid";
			
			public static string BudgetAmount = "budgetamount";
			
			public static string BudgetAmountBase = "budgetamount_base";
			
			public static string Budget = "budgetstatus";
			
			public static string BusinessCard = "businesscard";
			
			public static string BusinessCardAttributes = "businesscardattributes";
			
			public static string SourceCampaign = "campaignid";
			
			public static string CompanyName = "companyname";
			
			public static string ConfirmInterest = "confirminterest";
			
			public static string Contact = "contactid";
			
			public static string CreatedBy = "createdby";
			
			public static string CreatedOn = "createdon";
			
			public static string Customer = "customerid";
			
			public static string DecisionMaker = "decisionmaker";
			
			public static string Description = "description";
			
			public static string DoNotAllowBulkEmails = "donotbulkemail";
			
			public static string DoNotAllowEmails = "donotemail";
			
			public static string DoNotAllowFaxes = "donotfax";
			
			public static string DoNotAllowPhoneCalls = "donotphone";
			
			public static string DoNotAllowMails = "donotpostalmail";
			
			public static string MarketingMaterial = "donotsendmm";
			
			public static string Email = "emailaddress1";
			
			public static string EmailAddressTwo = "emailaddress2";
			
			public static string EmailAddressThree = "emailaddress3";
			
			public static string EntityImageId = "entityimageid";
			
			public static string EstValue = "estimatedamount";
			
			public static string EstValueBase = "estimatedamount_base";
			
			public static string EstCloseDate = "estimatedclosedate";
			
			public static string EstValueDeprecated = "estimatedvalue";
			
			public static string EvaluateFit = "evaluatefit";
			
			public static string ExchangeRate = "exchangerate";
			
			public static string Fax = "fax";
			
			public static string FirstName = "firstname";
			
			public static string FollowEmailActivity = "followemail";
			
			public static string Name = "fullname";
			
			public static string Industry = "industrycode";
			
			public static string InitialCommunication = "initialcommunication";
			
			public static string JobTitle = "jobtitle";
			
			public static string LastName = "lastname";
			
			public static string LastOnHoldTime = "lastonholdtime";
			
			public static string LastCampaignDate = "lastusedincampaign";
			
			public static string LeadId = "leadid";
			
			public static string Id = "leadid";
			
			public static string Rating = "leadqualitycode";
			
			public static string LeadSource = "leadsourcecode";
			
			public static string MasterID = "masterid";
			
			public static string Merged = "merged";
			
			public static string MiddleName = "middlename";
			
			public static string MobilePhone = "mobilephone";
			
			public static string ModifiedBy = "modifiedby";
			
			public static string ModifiedOn = "modifiedon";
			
			public static string GDPROptout = "msdyn_gdproptout";
			
			public static string DeprecatedLeadGrade = "msdyn_leadgrade";
			
			public static string DeprecatedLeadScore = "msdyn_leadscore";
			
			public static string DeprecatedLeadScoreTrend = "msdyn_leadscoretrend";
			
			public static string PredictiveScore = "msdyn_predictivescoreid";
			
			public static string AssignmentRuleResult = "msdyn_salesassignmentresult";
			
			public static string DeprecatedScoreHistory = "msdyn_scorehistory";
			
			public static string DeprecatedScoreReasons = "msdyn_scorereasons";
			
			public static string SegmentId = "msdyn_segmentid";
			
			public static string Need = "need";
			
			public static string NoOfEmployees = "numberofemployees";
			
			public static string OnHoldTimeMinutes = "onholdtime";
			
			public static string OriginatingCase = "originatingcaseid";
			
			public static string Owner = "ownerid";
			
			public static string OwningBusinessUnit = "owningbusinessunit";
			
			public static string OwningTeam = "owningteam";
			
			public static string OwningUser = "owninguser";
			
			public static string Pager = "pager";
			
			public static string ParentAccountForLead = "parentaccountid";
			
			public static string ParentContactForLead = "parentcontactid";
			
			public static string ParticipatesInWorkflow = "participatesinworkflow";
			
			public static string PreferredMethodOfContact = "preferredcontactmethodcode";
			
			public static string Priority = "prioritycode";
			
			public static string ProcessId = "processid";
			
			public static string PurchaseProcess = "purchaseprocess";
			
			public static string PurchaseTimeframe = "purchasetimeframe";
			
			public static string QualificationComments = "qualificationcomments";
			
			public static string QualifyingOpportunity = "qualifyingopportunityid";
			
			public static string RelatedCampaignResponse = "relatedobjectid";
			
			public static string AnnualRevenue = "revenue";
			
			public static string AnnualRevenueBase = "revenue_base";
			
			public static string SalesStage = "salesstage";
			
			public static string SalesStageCode = "salesstagecode";
			
			public static string Salutation = "salutation";
			
			public static string ScheduleFollowUpProspect = "schedulefollowup_prospect";
			
			public static string ScheduleFollowUpQualify = "schedulefollowup_qualify";
			
			public static string SICCode = "sic";
			
			public static string SLA = "slaid";
			
			public static string LastSLAApplied = "slainvokedid";
			
			public static string DeprecatedStageId = "stageid";
			
			public static string State = "statecode";
			
			public static string StatusReason = "statuscode";
			
			public static string Topic = "subject";
			
			public static string TeamsFollowed = "teamsfollowed";
			
			public static string BusinessPhone = "telephone1";
			
			public static string HomePhone = "telephone2";
			
			public static string OtherPhone = "telephone3";
			
			public static string TimeSpentByMe = "timespentbymeonemailandmeetings";
			
			public static string Currency = "transactioncurrencyid";
			
			public static string DeprecatedTraversedPath = "traversedpath";
			
			public static string Website = "websiteurl";
			
			public static string YomiCompanyName = "yomicompanyname";
			
			public static string YomiFirstName = "yomifirstname";
			
			public static string YomiFullName = "yomifullname";
			
			public static string YomiLastName = "yomilastname";
			
			public static string YomiMiddleName = "yomimiddlename";
		}
	}
}
